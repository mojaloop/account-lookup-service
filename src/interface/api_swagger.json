{
  "swagger": "2.0",
  "info": {
    "version": "1.0.1",
    "title": "Open API for FSP Interoperability (FSPIOP) (Implementation Friendly Version)",
    "description": "Based on API Definition.docx updated on 2018-03-13 Version 1.0. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.",
    "license": {
      "name": "Open API for FSP Interoperability (FSPIOP) (Implementation Friendly Version)"
    }
  },
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/participants/{ID}/error": {
      "put": {
        "description": "If there is an error during FSP information creation in the server, the error callback PUT /participants/<ID>/error is used. The <ID> in the URI should contain the requestId that was used for the creation of the participant information.",
        "summary": "ParticipantsByIDAndError",
        "tags": [
          "participants",
          "sampled"
        ],
        "operationId": "als_participantsByIDAndError_put",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ErrorInformationObject"
            }
          },
          {
            "$ref": "#/parameters/ID"
          },
          {
            "$ref": "#/parameters/Content-Length"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Date"
          },
          {
            "$ref": "#/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/parameters/FSPIOP-Destination-Optional"
          },
          {
            "$ref": "#/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/parameters/FSPIOP-HTTP-Method"
          }
        ],
        "x-examples": {
          "application/json": {
            "“errorInformation”": {
              "“errorCode”": "“5100”",
              "“errorDescription”": "“This is an error description”",
              "extensionList": {
                "extension": [
                  {
                    "“key”": "“errorDescription”",
                    "“value”": "“This is a more detailed error description”"
                  },
                  {
                    "“key”": "“errorDescription”",
                    "“value”": "“This is a more detailed error description”"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/responses/Response200"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      }
    },
    "/participants/{ID}": {
      "put": {
        "description": "The callback PUT /participants/<ID> is used to inform the client of the result of the creation of the provided list of identities.",
        "summary": "ParticipantsByID",
        "tags": [
          "participants",
          "sampled"
        ],
        "operationId": "als_participantsByID_put",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ParticipantsIDPutResponse"
            }
          },
          {
            "$ref": "#/parameters/Content-Length"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Date"
          },
          {
            "$ref": "#/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/parameters/FSPIOP-Destination-Optional"
          },
          {
            "$ref": "#/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/parameters/FSPIOP-HTTP-Method"
          }
        ],
        "x-examples": {
          "application/json": {
            "“partyList”": [
              {
                "partyId": {
                  "partyIdType": "PERSONAL_ID",
                  "partyIdentifier": "personal_id"
                }
              },
              {
                "partyId": {
                  "partyIdType": "PERSONAL_ID",
                  "partyIdentifier": "personal_id"
                }
              }
            ],
            "currency": "USD"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/responses/Response200"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      }
    },
    "/participants/{Type}/{ID}/error": {
      "put": {
        "description": "If the server is unable to find, create or delete the associated FSP of the provided identity, or another processing error occurred, the error callback PUT /participants/<Type>/<ID>/error (or PUT /participants/<Type>/<ID>/<SubId>/error) is used.",
        "summary": "ParticipantsErrorByTypeAndID",
        "tags": [
          "participants",
          "sampled"
        ],
        "operationId": "als_participantsErrorByTypeAndID_put",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ErrorInformationObject"
            }
          },
          {
            "$ref": "#/parameters/Type"
          },
          {
            "$ref": "#/parameters/ID"
          },
          {
            "$ref": "#/parameters/Content-Length"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Date"
          },
          {
            "$ref": "#/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/parameters/FSPIOP-Destination-Required"
          },
          {
            "$ref": "#/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/parameters/FSPIOP-HTTP-Method"
          }
        ],
        "x-examples": {
          "application/json": {
            "“errorInformation”": {
              "“errorCode”": "“5100”",
              "“errorDescription”": "“This is an error description”",
              "extensionList": {
                "extension": [
                  {
                    "“key”": "“errorDescription”",
                    "“value”": "“This is a more detailed error description”"
                  },
                  {
                    "“key”": "“errorDescription”",
                    "“value”": "“This is a more detailed error description”"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/responses/Response200"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      }
    },
    "/participants/{Type}/{ID}/{SubId}/error": {
      "put": {
        "description": "If the server is unable to find, create or delete the associated FSP of the provided identity, or another processing error occurred, the error callback PUT /participants/<Type>/<ID>/error (or PUT /participants/<Type>/<ID>/<SubId>/error) is used.",
        "summary": "ParticipantsSubIdErrorByTypeAndID",
        "tags": [
          "participants",
          "sampled"
        ],
        "operationId": "als_participantsSubIdErrorByTypeAndID_put",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Type"
          },
          {
            "$ref": "#/parameters/ID"
          },
          {
            "$ref": "#/parameters/SubId"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ErrorInformationObject"
            }
          },
          {
            "$ref": "#/parameters/Content-Length"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Date"
          },
          {
            "$ref": "#/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/parameters/FSPIOP-Destination-Optional"
          },
          {
            "$ref": "#/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/parameters/FSPIOP-HTTP-Method"
          }
        ],
        "x-examples": {
          "application/json": {
            "“errorInformation”": {
              "“errorCode”": "“5100”",
              "“errorDescription”": "“This is an error description”",
              "extensionList": {
                "extension": [
                  {
                    "“key”": "“errorDescription”",
                    "“value”": "“This is a more detailed error description”"
                  },
                  {
                    "“key”": "“errorDescription”",
                    "“value”": "“This is a more detailed error description”"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/responses/Response200"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      }
    },
    "/participants/{Type}/{ID}/{SubId}": {
      "parameters": [
        {
          "$ref": "#/parameters/Accept"
        },
        {
          "$ref": "#/parameters/Type"
        },
        {
          "$ref": "#/parameters/ID"
        },
        {
          "$ref": "#/parameters/SubId"
        },
        {
          "$ref": "#/parameters/Content-Type"
        },
        {
          "$ref": "#/parameters/Date"
        },
        {
          "$ref": "#/parameters/X-Forwarded-For"
        },
        {
          "$ref": "#/parameters/FSPIOP-Source"
        },
        {
          "$ref": "#/parameters/FSPIOP-Destination-Optional"
        },
        {
          "$ref": "#/parameters/FSPIOP-Encryption"
        },
        {
          "$ref": "#/parameters/FSPIOP-Signature"
        },
        {
          "$ref": "#/parameters/FSPIOP-URI"
        },
        {
          "$ref": "#/parameters/FSPIOP-HTTP-Method"
        }
      ],
      "get": {
        "description": "The HTTP request GET /participants/<Type>/<ID> (or GET /participants/<Type>/<ID>/<SubId>) is used to find out in which FSP the requested Party, defined by <Type>, <ID> and optionally <SubId>, is located (for example, GET /participants/MSISDN/123456789, or GET /participants/BUSINESS/shoecompany/employee1).",
        "summary": "ParticipantsSubIdByTypeAndID",
        "tags": [
          "participants",
          "sampled"
        ],
        "operationId": "als_participantsSubIdByTypeAndID_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Accept"
          },
          {
            "$ref": "#/parameters/Type"
          },
          {
            "$ref": "#/parameters/ID"
          },
          {
            "$ref": "#/parameters/SubId"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Date"
          },
          {
            "$ref": "#/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/parameters/FSPIOP-Destination-Optional"
          },
          {
            "$ref": "#/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/parameters/FSPIOP-HTTP-Method"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/Response202"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      },
      "put": {
        "description": "The callback PUT /participants/<Type>/<ID> (or PUT /participants/<Type>/<ID>/<SubId>) is used to inform the client of a successful result of the lookup, creation, or deletion of the FSP information related to the Party. If the FSP information is deleted, the fspId element should be empty; otherwise the element should include the FSP information for the Party.",
        "summary": "ParticipantsSubIdByTypeAndID",
        "tags": [
          "participants",
          "sampled"
        ],
        "operationId": "als_participantsSubIdByTypeAndID3_put",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Accept"
          },
          {
            "$ref": "#/parameters/Type"
          },
          {
            "$ref": "#/parameters/ID"
          },
          {
            "$ref": "#/parameters/SubId"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Date"
          },
          {
            "$ref": "#/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/parameters/FSPIOP-Destination-Optional"
          },
          {
            "$ref": "#/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/parameters/FSPIOP-HTTP-Method"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ParticipantsTypeIDPutResponse"
            }
          },
          {
            "$ref": "#/parameters/Content-Length"
          }
        ],
        "x-examples": {
          "application/json": {
            "“fspId”": "“1234”"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/responses/Response200"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      },
      "post": {
        "description": "The HTTP request POST /participants/<Type>/<ID> (or POST /participants/<Type>/<ID>/<SubId>) is used to create information in the server regarding the provided identity, defined by <Type>, <ID>, and optionally <SubId> (for example, POST /participants/MSISDN/123456789 or POST /participants/BUSINESS/shoecompany/employee1).",
        "summary": "ParticipantsSubIdByTypeAndID",
        "tags": [
          "participants",
          "sampled"
        ],
        "operationId": "als_participantsSubIdByTypeAndID_post",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Accept"
          },
          {
            "$ref": "#/parameters/Type"
          },
          {
            "$ref": "#/parameters/ID"
          },
          {
            "$ref": "#/parameters/SubId"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Date"
          },
          {
            "$ref": "#/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/parameters/FSPIOP-Destination-Optional"
          },
          {
            "$ref": "#/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/parameters/FSPIOP-HTTP-Method"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ParticipantsTypeIDSubIDPostRequest"
            }
          },
          {
            "$ref": "#/parameters/Content-Length"
          }
        ],
        "x-examples": {
          "application/json": {
            "“fspId”": "“1234”",
            "“currency”": "“USD”"
          }
        },
        "responses": {
          "202": {
            "$ref": "#/responses/Response202"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      },
      "delete": {
        "description": "The HTTP request DELETE /participants/<Type>/<ID> (or DELETE /participants/<Type>/<ID>/<SubId>) is used to delete information in the server regarding the provided identity, defined by <Type> and <ID>) (for example, DELETE /participants/MSISDN/123456789), and optionally <SubId>. This HTTP request should support a query string to delete FSP information regarding a specific currency only. To delete a specific currency only, the HTTP request DELETE /participants/<Type>/<ID>?currency=XYZ should be used, where XYZ is the requested currency. Note -  The Account Lookup System should verify that it is the Party’s current FSP that is deleting the FSP information.",
        "summary": "ParticipantsSubIdByTypeAndID",
        "tags": [
          "participants",
          "sampled"
        ],
        "operationId": "als_participantsSubIdByTypeAndID2_delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Type"
          },
          {
            "$ref": "#/parameters/ID"
          },
          {
            "$ref": "#/parameters/SubId"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Date"
          },
          {
            "$ref": "#/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/parameters/FSPIOP-Destination-Optional"
          },
          {
            "$ref": "#/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/parameters/FSPIOP-HTTP-Method"
          },
          {
            "$ref": "#/parameters/Accept"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/Response202"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      }
    },
    "/participants/{Type}/{ID}": {
      "parameters": [
        {
          "$ref": "#/parameters/Accept"
        },
        {
          "$ref": "#/parameters/Type"
        },
        {
          "$ref": "#/parameters/ID"
        },
        {
          "$ref": "#/parameters/Content-Type"
        },
        {
          "$ref": "#/parameters/Date"
        },
        {
          "$ref": "#/parameters/X-Forwarded-For"
        },
        {
          "$ref": "#/parameters/FSPIOP-Source"
        },
        {
          "$ref": "#/parameters/FSPIOP-Destination-Optional"
        },
        {
          "$ref": "#/parameters/FSPIOP-Encryption"
        },
        {
          "$ref": "#/parameters/FSPIOP-Signature"
        },
        {
          "$ref": "#/parameters/FSPIOP-URI"
        },
        {
          "$ref": "#/parameters/FSPIOP-HTTP-Method"
        }
      ],
      "get": {
        "description": "The HTTP request GET /participants/<Type>/<ID> (or GET /participants/<Type>/<ID>/<SubId>) is used to find out in which FSP the requested Party, defined by <Type>, <ID> and optionally <SubId>, is located (for example, GET /participants/MSISDN/123456789, or GET /participants/BUSINESS/shoecompany/employee1).",
        "summary": "ParticipantsByTypeAndID",
        "tags": [
          "participants",
          "sampled"
        ],
        "operationId": "als_participantsByTypeAndID_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Accept"
          },
          {
            "$ref": "#/parameters/Type"
          },
          {
            "$ref": "#/parameters/ID"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Date"
          },
          {
            "$ref": "#/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/parameters/FSPIOP-Destination-Optional"
          },
          {
            "$ref": "#/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/parameters/FSPIOP-HTTP-Method"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/Response202"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      },
      "put": {
        "description": "The callback PUT /participants/<Type>/<ID> (or PUT /participants/<Type>/<ID>/<SubId>) is used to inform the client of a successful result of the lookup, creation, or deletion of the FSP information related to the Party. If the FSP information is deleted, the fspId element should be empty; otherwise the element should include the FSP information for the Party.",
        "summary": "ParticipantsByTypeAndID",
        "tags": [
          "participants",
          "sampled"
        ],
        "operationId": "als_participantsByTypeAndID3_put",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Accept-Optional"
          },
          {
            "$ref": "#/parameters/Type"
          },
          {
            "$ref": "#/parameters/ID"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Date"
          },
          {
            "$ref": "#/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/parameters/FSPIOP-Destination-Optional"
          },
          {
            "$ref": "#/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/parameters/FSPIOP-HTTP-Method"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ParticipantsTypeIDPutResponse"
            }
          },
          {
            "$ref": "#/parameters/Content-Length"
          }
        ],
        "x-examples": {
          "application/json": {
            "“fspId”": "“1234”"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/responses/Response200"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      },
      "post": {
        "description": "The HTTP request POST /participants/<Type>/<ID> (or POST /participants/<Type>/<ID>/<SubId>) is used to create information in the server regarding the provided identity, defined by <Type>, <ID>, and optionally <SubId> (for example, POST /participants/MSISDN/123456789 or POST /participants/BUSINESS/shoecompany/employee1).",
        "summary": "ParticipantsByIDAndType",
        "tags": [
          "participants",
          "sampled"
        ],
        "operationId": "als_participantsByIDAndType_post",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Accept"
          },
          {
            "$ref": "#/parameters/Type"
          },
          {
            "$ref": "#/parameters/ID"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Date"
          },
          {
            "$ref": "#/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/parameters/FSPIOP-Destination-Optional"
          },
          {
            "$ref": "#/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/parameters/FSPIOP-HTTP-Method"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ParticipantsTypeIDSubIDPostRequest"
            }
          },
          {
            "$ref": "#/parameters/Content-Length"
          }
        ],
        "x-examples": {
          "application/json": {
            "“fspId”": "“1234”",
            "“currency”": "“USD”"
          }
        },
        "responses": {
          "202": {
            "$ref": "#/responses/Response202"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      },
      "delete": {
        "description": "The HTTP request DELETE /participants/<Type>/<ID> (or DELETE /participants/<Type>/<ID>/<SubId>) is used to delete information in the server regarding the provided identity, defined by <Type> and <ID>) (for example, DELETE /participants/MSISDN/123456789), and optionally <SubId>. This HTTP request should support a query string to delete FSP information regarding a specific currency only. To delete a specific currency only, the HTTP request DELETE /participants/<Type>/<ID>?currency=XYZ should be used, where XYZ is the requested currency. Note -  The Account Lookup System should verify that it is the Party’s current FSP that is deleting the FSP information.",
        "summary": "ParticipantsByTypeAndID",
        "tags": [
          "participants",
          "sampled"
        ],
        "operationId": "als_participantsByTypeAndID2_delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Accept"
          },
          {
            "$ref": "#/parameters/Type"
          },
          {
            "$ref": "#/parameters/ID"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Date"
          },
          {
            "$ref": "#/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/parameters/FSPIOP-Destination-Optional"
          },
          {
            "$ref": "#/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/parameters/FSPIOP-HTTP-Method"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/Response202"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      }
    },
    "/participants": {
      "post": {
        "description": "The HTTP request POST /participants is used to create information in the server regarding the provided list of identities. This request should be used for bulk creation of FSP information for more than one Party. The optional currency parameter should indicate that each provided Party supports the currency",
        "summary": "Participants",
        "tags": [
          "participants",
          "sampled"
        ],
        "operationId": "als_participants1_post",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ParticipantsPostRequest"
            }
          },
          {
            "$ref": "#/parameters/Accept"
          },
          {
            "$ref": "#/parameters/Content-Length"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Date"
          },
          {
            "$ref": "#/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/parameters/FSPIOP-Destination-Optional"
          },
          {
            "$ref": "#/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/parameters/FSPIOP-HTTP-Method"
          }
        ],
        "x-examples": {
          "application/json": {
            "“requestId”": "“b51ec534-ee48-4575-b6a9-ead2955b8069”",
            "“partyList”": [
              {
                "“partyIdType”": "“PERSONAL_ID”",
                "“partyIdentifier”": "“16135551212”",
                "“partySubIdOrType”": "“PASSPORT”",
                "“fspId”": "“1234”"
              },
              {
                "“partyIdType”": "“PERSONAL_ID”",
                "“partyIdentifier”": "“16135551234”",
                "“partySubIdOrType”": "“DRIVING_LICENSE”",
                "“fspId”": "“1234”"
              }
            ],
            "currency": "USD"
          }
        },
        "responses": {
          "202": {
            "$ref": "#/responses/Response202"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      }
    },
    "/parties/{Type}/{ID}": {
      "parameters": [
        {
          "$ref": "#/parameters/Accept"
        },
        {
          "$ref": "#/parameters/Type"
        },
        {
          "$ref": "#/parameters/ID"
        },
        {
          "$ref": "#/parameters/Content-Type"
        },
        {
          "$ref": "#/parameters/Date"
        },
        {
          "$ref": "#/parameters/X-Forwarded-For"
        },
        {
          "$ref": "#/parameters/FSPIOP-Source"
        },
        {
          "$ref": "#/parameters/FSPIOP-Destination-Optional"
        },
        {
          "$ref": "#/parameters/FSPIOP-Encryption"
        },
        {
          "$ref": "#/parameters/FSPIOP-Signature"
        },
        {
          "$ref": "#/parameters/FSPIOP-URI"
        },
        {
          "$ref": "#/parameters/FSPIOP-HTTP-Method"
        }
      ],
      "get": {
        "description": "The HTTP request GET /parties/<Type>/<ID> (or GET /parties/<Type>/<ID>/<SubId>) is used to lookup information regarding the requested Party, defined by <Type>, <ID> and optionally <SubId> (for example, GET /parties/MSISDN/123456789, or GET /parties/BUSINESS/shoecompany/employee1).",
        "summary": "PartiesByTypeAndID",
        "tags": [
          "parties",
          "sampled"
        ],
        "operationId": "als_partiesByTypeAndID_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Accept"
          },
          {
            "$ref": "#/parameters/Type"
          },
          {
            "$ref": "#/parameters/ID"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Date"
          },
          {
            "$ref": "#/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/parameters/FSPIOP-Destination-Optional"
          },
          {
            "$ref": "#/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/parameters/FSPIOP-HTTP-Method"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/Response202"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      },
      "put": {
        "description": "The callback PUT /parties/<Type>/<ID> (or PUT /parties/<Type>/<ID>/<SubId>) is used to inform the client of a successful result of the Party information lookup.",
        "summary": "PartiesByTypeAndID2",
        "tags": [
          "parties",
          "sampled"
        ],
        "operationId": "als_partiesByTypeAndID2_put",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Accept-Optional"
          },
          {
            "$ref": "#/parameters/Type"
          },
          {
            "$ref": "#/parameters/ID"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Date"
          },
          {
            "$ref": "#/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/parameters/FSPIOP-Destination-Required"
          },
          {
            "$ref": "#/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/parameters/FSPIOP-HTTP-Method"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PartiesTypeIDPutResponse"
            }
          },
          {
            "$ref": "#/parameters/Content-Length"
          }
        ],
        "x-examples": {
          "application/json": {
            "party": {
              "partyIdInfo": {
                "“partyIdType”": "“PERSONAL_ID”",
                "“partyIdentifier”": "“16135551212”",
                "“partySubIdOrType”": "“DRIVING_LICENSE”",
                "“fspId”": "“1234”",
                "“extensionList“": {
                  "“extension“": [
                    {
                      "“key“": "Account Type",
                      "“value“": "Wallet"
                    }
                  ]
                }
              },
              "merchantClassificationCode": "4321",
              "“name”": "“Justin Trudeau”",
              "“personalInfo”": {
                "“complexName”": {
                  "“firstName”": "“Justin”",
                  "“middleName”": "“Pierre”",
                  "“lastName”": "“Trudeau”"
                },
                "“dateOfBirth”": "“1971-12-25”"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/responses/Response200"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      }
    },
    "/parties/{Type}/{ID}/error": {
      "put": {
        "description": "If the server is unable to find Party information of the provided identity, or another processing error occurred, the error callback PUT /parties/<Type>/<ID>/error (or PUT /parties/<Type>/<ID>/<SubId>/error) is used.",
        "summary": "PartiesErrorByTypeAndID",
        "tags": [
          "parties",
          "sampled"
        ],
        "operationId": "als_partiesErrorByTypeAndID_put",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Accept-Optional"
          },
          {
            "$ref": "#/parameters/Type"
          },
          {
            "$ref": "#/parameters/ID"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Date"
          },
          {
            "$ref": "#/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/parameters/FSPIOP-Destination-Required"
          },
          {
            "$ref": "#/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/parameters/FSPIOP-HTTP-Method"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ErrorInformationObject"
            }
          },
          {
            "$ref": "#/parameters/Content-Length"
          }
        ],
        "x-examples": {
          "application/json": {
            "“errorInformation”": {
              "“errorCode”": "“5100”",
              "“errorDescription”": "“This is an error description”",
              "extensionList": {
                "extension": [
                  {
                    "“key”": "“errorDescription”",
                    "“value”": "“This is a more detailed error description”"
                  },
                  {
                    "“key”": "“errorDescription”",
                    "“value”": "“This is a more detailed error description”"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/responses/Response200"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      }
    },
    "/parties/{Type}/{ID}/{SubId}": {
      "parameters": [
        {
          "$ref": "#/parameters/Type"
        },
        {
          "$ref": "#/parameters/ID"
        },
        {
          "$ref": "#/parameters/SubId"
        },
        {
          "$ref": "#/parameters/Content-Type"
        },
        {
          "$ref": "#/parameters/Date"
        },
        {
          "$ref": "#/parameters/X-Forwarded-For"
        },
        {
          "$ref": "#/parameters/FSPIOP-Source"
        },
        {
          "$ref": "#/parameters/FSPIOP-Destination-Optional"
        },
        {
          "$ref": "#/parameters/FSPIOP-Encryption"
        },
        {
          "$ref": "#/parameters/FSPIOP-Signature"
        },
        {
          "$ref": "#/parameters/FSPIOP-URI"
        },
        {
          "$ref": "#/parameters/FSPIOP-HTTP-Method"
        }
      ],
      "get": {
        "description": "The HTTP request GET /parties/<Type>/<ID> (or GET /parties/<Type>/<ID>/<SubId>) is used to lookup information regarding the requested Party, defined by <Type>, <ID> and optionally <SubId> (for example, GET /parties/MSISDN/123456789, or GET /parties/BUSINESS/shoecompany/employee1).",
        "summary": "PartiesSubIdByTypeAndID",
        "tags": [
          "parties",
          "sampled"
        ],
        "operationId": "als_partiesSubIdByTypeAndID_get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Type"
          },
          {
            "$ref": "#/parameters/ID"
          },
          {
            "$ref": "#/parameters/SubId"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Date"
          },
          {
            "$ref": "#/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/parameters/FSPIOP-Destination-Optional"
          },
          {
            "$ref": "#/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/parameters/FSPIOP-HTTP-Method"
          },
          {
            "$ref": "#/parameters/Accept"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/Response202"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      },
      "put": {
        "description": "The callback PUT /parties/<Type>/<ID> (or PUT /parties/<Type>/<ID>/<SubId>) is used to inform the client of a successful result of the Party information lookup.",
        "summary": "PartiesSubIdByTypeAndID",
        "tags": [
          "parties",
          "sampled"
        ],
        "operationId": "also_partiesSubIdByTypeAndID_put",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Type"
          },
          {
            "$ref": "#/parameters/ID"
          },
          {
            "$ref": "#/parameters/SubId"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Date"
          },
          {
            "$ref": "#/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/parameters/FSPIOP-Destination-Optional"
          },
          {
            "$ref": "#/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/parameters/FSPIOP-HTTP-Method"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PartiesTypeIDPutResponse"
            }
          },
          {
            "$ref": "#/parameters/Content-Length"
          }
        ],
        "x-examples": {
          "application/json": {
            "party": {
              "partyIdInfo": {
                "“partyIdType”": "“PERSONAL_ID”",
                "“partyIdentifier”": "“16135551212”",
                "“partySubIdOrType”": "“DRIVING_LICENSE”",
                "“fspId”": "“1234”",
                "“extensionList“": {
                  "“extension“": [
                    {
                      "“key“": "Account Type",
                      "“value“": "Wallet"
                    }
                  ]
                }
              },
              "merchantClassificationCode": "4321",
              "“name”": "“Justin Trudeau”",
              "“personalInfo”": {
                "“complexName”": {
                  "“firstName”": "“Justin”",
                  "“middleName”": "“Pierre”",
                  "“lastName”": "“Trudeau”"
                },
                "“dateOfBirth”": "“1971-12-25”"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/responses/Response200"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      }
    },
    "/parties/{Type}/{ID}/{SubId}/error": {
      "put": {
        "description": "If the server is unable to find Party information of the provided identity, or another processing error occurred, the error callback PUT /parties/<Type>/<ID>/error (or PUT /parties/<Type>/<ID>/<SubId>/error) is used.",
        "summary": "PartiesSubIdErrorByTypeAndID",
        "tags": [
          "parties",
          "sampled"
        ],
        "operationId": "als_partiesSubIdErrorByTypeAndID_put",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Type"
          },
          {
            "$ref": "#/parameters/ID"
          },
          {
            "$ref": "#/parameters/SubId"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ErrorInformationObject"
            }
          },
          {
            "$ref": "#/parameters/Content-Length"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Date"
          },
          {
            "$ref": "#/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/parameters/FSPIOP-Destination-Optional"
          },
          {
            "$ref": "#/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/parameters/FSPIOP-HTTP-Method"
          }
        ],
        "x-examples": {
          "application/json": {
            "“errorInformation”": {
              "“errorCode”": "“5100”",
              "“errorDescription”": "“This is an error description”",
              "extensionList": {
                "extension": [
                  {
                    "“key”": "“errorDescription”",
                    "“value”": "“This is a more detailed error description”"
                  },
                  {
                    "“key”": "“errorDescription”",
                    "“value”": "“This is a more detailed error description”"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/responses/Response200"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      }
    },
    "/health": {
      "get": {
        "description": "The HTTP request GET /health is used to return the current status of the ALS API.",
        "summary": "Get health",
        "tags": [
          "health"
        ],
        "operationId": "als_ApiHealth_get",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseHealth200"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      }
    },
    "/endpointcache": {
      "delete": {
        "description": "The HTTP request DELETE /endpointcache is used to reset the endpoint cache by performing an stopCache and initializeCache the Admin API.",
        "summary": "Endpoint Cache",
        "tags": [
          "cache",
          "sampled"
        ],
        "operationId": "als_endpointCache_get",
        "parameters": [
          {
            "$ref": "#/parameters/Date"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/Response202"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse400"
          },
          "401": {
            "$ref": "#/responses/ErrorResponse401"
          },
          "403": {
            "$ref": "#/responses/ErrorResponse403"
          },
          "404": {
            "$ref": "#/responses/ErrorResponse404"
          },
          "405": {
            "$ref": "#/responses/ErrorResponse405"
          },
          "406": {
            "$ref": "#/responses/ErrorResponse406"
          },
          "501": {
            "$ref": "#/responses/ErrorResponse501"
          },
          "503": {
            "$ref": "#/responses/ErrorResponse503"
          }
        }
      }
    }
  },
  "definitions": {
    "Amount": {
      "title": "Amount",
      "type": "string",
      "pattern": "^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$",
      "description": "The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed."
    },
    "AmountType": {
      "title": "AmountType",
      "type": "string",
      "enum": [
        "SEND",
        "RECEIVE"
      ],
      "description": "Below are the allowed values for the enumeration AmountType - SEND Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees. - RECEIVE Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive fees."
    },
    "AuthenticationType": {
      "title": "AuthenticationTypeEnum",
      "type": "string",
      "enum": [
        "OTP",
        "QRCODE"
      ],
      "description": "Below are the allowed values for the enumeration AuthenticationType. - OTP One-time password generated by the Payer FSP. - QRCODE QR code used as One Time Password."
    },
    "AuthenticationValue": {
      "title": "AuthenticationValue",
      "type": "string",
      "pattern": "^\\d{3,10}$|^\\S{1,64}$",
      "description": "Contains the authentication value. The format depends on the authentication type used in the AuthenticationInfo complex type."
    },
    "AuthorizationResponse": {
      "title": "AuthorizationResponse",
      "type": "string",
      "enum": [
        "ENTERED",
        "REJECTED",
        "RESEND"
      ],
      "description": "Below are the allowed values for the enumeration - ENTERED Consumer entered the authentication value. - REJECTED Consumer rejected the transaction. - RESEND Consumer requested to resend the authentication value."
    },
    "BalanceOfPayments": {
      "title": "BalanceOfPayments",
      "type": "string",
      "pattern": "^[1-9]\\d{2}$",
      "description": "(BopCode) The API data type BopCode is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. https://www.imf.org/external/np/sta/bopcode/"
    },
    "BinaryString": {
      "type": "string",
      "pattern": "^[A-Za-z0-9-_]+[=]{0,2}$",
      "description": "The API data type BinaryString is a JSON String. The string is a base64url  encoding of a string of raw bytes, where padding (character ‘=’) is added at the end of the data if needed to ensure that the string is a multiple of 4 characters. The length restriction indicates the allowed number of characters."
    },
    "BinaryString32": {
      "type": "string",
      "pattern": "^[A-Za-z0-9-_]{43}$",
      "description": "The API data type BinaryString32 is a fixed size version of the API data type BinaryString, where the raw underlying data is always of 32 bytes. The data type BinaryString32 should not use a padding character as the size of the underlying data is fixed."
    },
    "BulkTransferState": {
      "title": "BulkTransactionStateEnum",
      "type": "string",
      "enum": [
        "RECEIVED",
        "PENDING",
        "ACCEPTED",
        "PROCESSING",
        "COMPLETED",
        "REJECTED"
      ],
      "description": "Below are the allowed values for the enumeration - RECEIVED Payee FSP has received the bulk transfer from the Payer FSP. - PENDING Payee FSP has validated the bulk transfer. - ACCEPTED Payee FSP has accepted to process the bulk transfer. - PROCESSING Payee FSP has started to transfer fund to the Payees. - COMPLETED Payee FSP has completed transfer of funds to the Payees. - REJECTED Payee FSP has rejected to process the bulk transfer."
    },
    "Code": {
      "title": "Code",
      "type": "string",
      "pattern": "^[0-9a-zA-Z]{4,32}$",
      "description": "Any code/token returned by the Payee FSP (TokenCode Type)."
    },
    "CorrelationId": {
      "title": "CorrelationId",
      "type": "string",
      "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
      "description": "Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to RFC 4122, that is restricted by a regular expression for interoperability reasons. An UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘)."
    },
    "Currency": {
      "title": "CurrencyEnum",
      "description": "The currency codes defined in ISO 4217 as three-letter alphabetic codes are used as the standard naming representation for currencies.",
      "type": "string",
      "minLength": 3,
      "maxLength": 3,
      "enum": [
        "AED",
        "AFN",
        "ALL",
        "AMD",
        "ANG",
        "AOA",
        "ARS",
        "AUD",
        "AWG",
        "AZN",
        "BAM",
        "BBD",
        "BDT",
        "BGN",
        "BHD",
        "BIF",
        "BMD",
        "BND",
        "BOB",
        "BRL",
        "BSD",
        "BTN",
        "BWP",
        "BYN",
        "BZD",
        "CAD",
        "CDF",
        "CHF",
        "CLP",
        "CNY",
        "COP",
        "CRC",
        "CUC",
        "CUP",
        "CVE",
        "CZK",
        "DJF",
        "DKK",
        "DOP",
        "DZD",
        "EGP",
        "ERN",
        "ETB",
        "EUR",
        "FJD",
        "FKP",
        "GBP",
        "GEL",
        "GGP",
        "GHS",
        "GIP",
        "GMD",
        "GNF",
        "GTQ",
        "GYD",
        "HKD",
        "HNL",
        "HRK",
        "HTG",
        "HUF",
        "IDR",
        "ILS",
        "IMP",
        "INR",
        "IQD",
        "IRR",
        "ISK",
        "JEP",
        "JMD",
        "JOD",
        "JPY",
        "KES",
        "KGS",
        "KHR",
        "KMF",
        "KPW",
        "KRW",
        "KWD",
        "KYD",
        "KZT",
        "LAK",
        "LBP",
        "LKR",
        "LRD",
        "LSL",
        "LYD",
        "MAD",
        "MDL",
        "MGA",
        "MKD",
        "MMK",
        "MNT",
        "MOP",
        "MRO",
        "MUR",
        "MVR",
        "MWK",
        "MXN",
        "MYR",
        "MZN",
        "NAD",
        "NGN",
        "NIO",
        "NOK",
        "NPR",
        "NZD",
        "OMR",
        "PAB",
        "PEN",
        "PGK",
        "PHP",
        "PKR",
        "PLN",
        "PYG",
        "QAR",
        "RON",
        "RSD",
        "RUB",
        "RWF",
        "SAR",
        "SBD",
        "SCR",
        "SDG",
        "SEK",
        "SGD",
        "SHP",
        "SLL",
        "SOS",
        "SPL",
        "SRD",
        "STD",
        "SVC",
        "SYP",
        "SZL",
        "THB",
        "TJS",
        "TMT",
        "TND",
        "TOP",
        "TRY",
        "TTD",
        "TVD",
        "TWD",
        "TZS",
        "UAH",
        "UGX",
        "USD",
        "UYU",
        "UZS",
        "VEF",
        "VND",
        "VUV",
        "WST",
        "XAF",
        "XCD",
        "XDR",
        "XOF",
        "XPF",
        "YER",
        "ZAR",
        "ZMW",
        "ZWD"
      ]
    },
    "Date": {
      "title": "Date",
      "type": "string",
      "pattern": "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$",
      "description": "The API data type Date is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. This format, as specified in ISO 8601, contains a date only. A more readable version of the format is yyyy-MM-dd. Examples - \"1982-05-23\", \"1987-08-05”"
    },
    "DateOfBirth": {
      "title": "DateofBirth (type Date)",
      "type": "string",
      "pattern": "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$",
      "description": "Date of Birth of the Party."
    },
    "DateTime": {
      "title": "DateTime",
      "type": "string",
      "pattern": "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:(\\.\\d{3}))(?:Z|[+-][01]\\d:[0-5]\\d)$",
      "description": "The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to ISO 8601, expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples -  \"2016-05-24T08:38:08.699-04:00\", \"2016-05-24T08:38:08.699Z\" (where Z indicates Zulu time zone, same as UTC)."
    },
    "ErrorCode": {
      "title": "ErrorCode",
      "type": "string",
      "pattern": "^[1-9]\\d{3}$",
      "description": "The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represents the specific error."
    },
    "ErrorDescription": {
      "title": "ErrorDescription",
      "type": "string",
      "minLength": 1,
      "maxLength": 128,
      "description": "Error description string."
    },
    "ExtensionKey": {
      "title": "ExtensionKey",
      "type": "string",
      "minLength": 1,
      "maxLength": 32,
      "description": "Extension key."
    },
    "ExtensionValue": {
      "title": "ExtensionValue",
      "type": "string",
      "minLength": 1,
      "maxLength": 128,
      "description": "Extension value."
    },
    "FirstName": {
      "title": "FirstName",
      "type": "string",
      "minLength": 1,
      "maxLength": 128,
      "pattern": "^(?!\\s*$)[\\w .,'-]{1,128}$",
      "description": "First name of the Party (Name Type)."
    },
    "FspId": {
      "title": "FspId",
      "type": "string",
      "minLength": 1,
      "maxLength": 32,
      "description": "FSP identifier."
    },
    "HealthStatusType": {
      "title": "HealthStatusType",
      "type": "string",
      "enum": [
        "OK",
        "DOWN"
      ],
      "description": "Below are the allowed values for the enumeration HealthStatusType - OK - DOWN"
    },
    "IlpCondition": {
      "title": "IlpCondition",
      "type": "string",
      "pattern": "^[A-Za-z0-9-_]{43}$",
      "maxLength": 48,
      "description": "Condition that must be attached to the transfer by the Payer."
    },
    "IlpFulfilment": {
      "title": "IlpFulfilment",
      "type": "string",
      "pattern": "^[A-Za-z0-9-_]{43}$",
      "maxLength": 48,
      "description": "Fulfilment that must be attached to the transfer by the Payee."
    },
    "IlpPacket": {
      "title": "IlpPacket",
      "type": "string",
      "pattern": "^[A-Za-z0-9-_]+[=]{0,2}$",
      "minLength": 1,
      "maxLength": 32768,
      "description": "Information for recipient (transport layer information)."
    },
    "Integer": {
      "title": "Integer",
      "type": "string",
      "pattern": "^[1-9]\\d*$",
      "description": "The API data type Integer is a JSON String consisting of digits only. Negative numbers and leading zeroes are not allowed. The data type is always limited to a specific number of digits."
    },
    "LastName": {
      "title": "LastName",
      "type": "string",
      "minLength": 1,
      "maxLength": 128,
      "pattern": "^(?!\\s*$)[\\w .,'-]{1,128}$",
      "description": "Last name of the Party (Name Type)."
    },
    "Latitude": {
      "title": "Latitude",
      "type": "string",
      "pattern": "^(\\+|-)?(?:90(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\\.[0-9]{1,6})?))$",
      "description": "The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons."
    },
    "Longitude": {
      "title": "Longitude",
      "type": "string",
      "pattern": "^(\\+|-)?(?:180(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\\.[0-9]{1,6})?))$",
      "description": "The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons."
    },
    "MerchantClassificationCode": {
      "title": "MerchantClassificationCode",
      "type": "string",
      "pattern": "^[\\d]{1,4}$",
      "description": "A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc."
    },
    "MiddleName": {
      "title": "MiddleName",
      "type": "string",
      "minLength": 1,
      "maxLength": 128,
      "pattern": "^(?!\\s*$)[\\w .,'-]{1,128}$",
      "description": "Middle name of the Party (Name Type)."
    },
    "Name": {
      "title": "Name",
      "type": "string",
      "pattern": "^(?!\\s*$)[\\w .,'-]{1,128}$",
      "description": "The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name. Regular Expression - The regular expression for restricting the Name type is \"^(?!\\s*$)[\\w .,'-]{1,128}$\". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ). Note -  In some programming languages, Unicode support must be specifically enabled. For example, if Java is used the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters."
    },
    "Note": {
      "title": "Note",
      "type": "string",
      "minLength": 1,
      "maxLength": 128,
      "description": "Memo assigned to transaction"
    },
    "OtpValue": {
      "title": "OtpValue",
      "type": "string",
      "pattern": "^\\d{3,10}$",
      "description": "The API data type OtpValue is a JSON String of 3 to 10 characters, consisting of digits only. Negative numbers are not allowed. One or more leading zeros are allowed."
    },
    "PartyIdentifier": {
      "title": "PartyIdentifier",
      "type": "string",
      "minLength": 1,
      "maxLength": 128,
      "description": "Identifier of the Party."
    },
    "PartyIdType": {
      "title": "PartyIdTypeEnum",
      "type": "string",
      "enum": [
        "MSISDN",
        "EMAIL",
        "PERSONAL_ID",
        "BUSINESS",
        "DEVICE",
        "ACCOUNT_ID",
        "IBAN",
        "ALIAS"
      ],
      "description": "Below are the allowed values for the enumeration - MSISDN An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the ITU-T E.164 standard. Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix. - EMAIL An email is used as reference to a participant. The format of the email should be according to the informational RFC 3696. - PERSONAL_ID A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element. - BUSINESS A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used. - DEVICE A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element. - ACCOUNT_ID A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP. - IBAN A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace. - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier."
    },
    "PartyName": {
      "title": "PartyName",
      "type": "string",
      "minLength": 1,
      "maxLength": 128,
      "description": "Name of the Party. Could be a real name or a nickname."
    },
    "PartySubIdOrType": {
      "title": "PartySubIdOrType",
      "type": "string",
      "minLength": 1,
      "maxLength": 128,
      "description": "Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType."
    },
    "PersonalIdentifierType": {
      "title": "PersonalIdentifierType",
      "type": "string",
      "enum": [
        "PASSPORT",
        "NATIONAL_REGISTRATION",
        "DRIVING_LICENSE",
        "ALIEN_REGISTRATION",
        "NATIONAL_ID_CARD",
        "EMPLOYER_ID",
        "TAX_ID_NUMBER",
        "SENIOR_CITIZENS_CARD",
        "MARRIAGE_CERTIFICATE",
        "HEALTH_CARD",
        "VOTERS_ID",
        "UNITED_NATIONS",
        "OTHER_ID"
      ],
      "description": "Below are the allowed values for the enumeration - PASSPORT A passport number is used as reference to a Party. - NATIONAL_REGISTRATION A national registration number is used as reference to a Party. - DRIVING_LICENSE A driving license is used as reference to a Party. - ALIEN_REGISTRATION An alien registration number is used as reference to a Party. - NATIONAL_ID_CARD A national ID card number is used as reference to a Party. - EMPLOYER_ID A tax identification number is used as reference to a Party. - TAX_ID_NUMBER A tax identification number is used as reference to a Party. - SENIOR_CITIZENS_CARD A senior citizens card number is used as reference to a Party. - MARRIAGE_CERTIFICATE A marriage certificate number is used as reference to a Party. - HEALTH_CARD A health card number is used as reference to a Party. - VOTERS_ID A voter’s identification number is used as reference to a Party. - UNITED_NATIONS An UN (United Nations) number is used as reference to a Party. - OTHER_ID Any other type of identification type number is used as reference to a Party."
    },
    "QRCODE": {
      "title": "QRCODE",
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "description": "QR code used as One Time Password."
    },
    "RefundReason": {
      "title": "RefundReason",
      "type": "string",
      "minLength": 1,
      "maxLength": 128,
      "description": "Reason for the refund."
    },
    "TokenCode": {
      "title": "TokenCode",
      "type": "string",
      "pattern": "^[0-9a-zA-Z]{4,32}$",
      "description": "The API data type TokenCode is a JSON String between 4 and 32 characters, consisting of digits or upper or lowercase characters from a to z."
    },
    "TransactionInitiator": {
      "title": "TransactionInitiatorEnum",
      "type": "string",
      "enum": [
        "PAYER",
        "PAYEE"
      ],
      "description": "Below are the allowed values for the enumeration - PAYER Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way. - PAYEE Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device."
    },
    "TransactionInitiatorType": {
      "title": "TransactionInitiatorTypeEnum",
      "type": "string",
      "enum": [
        "CONSUMER",
        "AGENT",
        "BUSINESS",
        "DEVICE"
      ],
      "description": "Below are the allowed values for the enumeration - CONSUMER Consumer is the initiator of the transaction. - AGENT Agent is the initiator of the transaction. - BUSINESS Business is the initiator of the transaction. - DEVICE Device is the initiator of the transaction."
    },
    "TransactionRequestState": {
      "title": "TransactionRequestStateEnum",
      "type": "string",
      "enum": [
        "RECEIVED",
        "PENDING",
        "ACCEPTED",
        "REJECTED"
      ],
      "description": "Below are the allowed values for the enumeration - RECEIVED Payer FSP has received the transaction from the Payee FSP. - PENDING Payer FSP has sent the transaction request to the Payer. - ACCEPTED Payer has approved the transaction. - REJECTED Payer has rejected the transaction."
    },
    "TransactionScenario": {
      "title": "TransactionScenarioEnum",
      "type": "string",
      "enum": [
        "DEPOSIT",
        "WITHDRAWAL",
        "TRANSFER",
        "PAYMENT",
        "REFUND"
      ],
      "description": "Below are the allowed values for the enumeration - DEPOSIT Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User. - WITHDRAWAL Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer. - TRANSFER Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction. - PAYMENT Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on. - REFUND Used for performing a refund of transaction."
    },
    "TransactionState": {
      "title": "TransactionStateEnum",
      "type": "string",
      "enum": [
        "RECEIVED",
        "PENDING",
        "COMPLETED",
        "REJECTED"
      ],
      "description": "Below are the allowed values for the enumeration - RECEIVED Payee FSP has received the transaction from the Payer FSP. - PENDING Payee FSP has validated the transaction. - COMPLETED Payee FSP has successfully performed the transaction. - REJECTED Payee FSP has failed to perform the transaction."
    },
    "TransactionSubScenario": {
      "title": "TransactionSubScenario",
      "type": "string",
      "pattern": "^[A-Z_]{1,32}$",
      "description": "Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type)."
    },
    "TransferState": {
      "title": "TransferStateEnum",
      "type": "string",
      "enum": [
        "RECEIVED",
        "RESERVED",
        "COMMITTED",
        "ABORTED"
      ],
      "description": "Below are the allowed values for the enumeration - RECEIVED Next ledger has received the transfer. - RESERVED Next ledger has reserved the transfer. - COMMITTED Next ledger has successfully performed the transfer. - ABORTED Next ledger has aborted the transfer due a rejection or failure to perform the transfer."
    },
    "UndefinedEnum": {
      "title": "UndefinedEnum",
      "type": "string",
      "pattern": "^[A-Z_]{1,32}$",
      "description": "The API data type UndefinedEnum is a JSON String consisting of 1 to 32 uppercase characters including an underscore character (_)."
    },
    "AuthenticationInfo": {
      "title": "AuthenticationInfo",
      "type": "object",
      "description": "Data model for the complex type AuthenticationInfo",
      "properties": {
        "authentication": {
          "type": "string"
        },
        "authenticationValue": {
          "type": "string"
        }
      },
      "required": [
        "authentication",
        "authenticationValue"
      ]
    },
    "AuthorizationsIDPutResponse": {
      "title": "AuthorizationsIDPutResponse",
      "type": "object",
      "description": "PUT /authorizations/{ID} object",
      "properties": {
        "authenticationInfo": {
          "type": "string",
          "description": "OTP or QR Code if entered, otherwise empty."
        },
        "responseType": {
          "type": "string",
          "description": "Enum containing response information; if the customer entered the authentication value, rejected the transaction, or requested a resend of the authentication value."
        }
      },
      "required": [
        "responseType"
      ]
    },
    "BulkQuotesPostRequest": {
      "title": "BulkQuotesPostRequest",
      "type": "object",
      "description": "POST /bulkQuotes object",
      "properties": {
        "bulkQuoteId": {
          "type": "string",
          "description": "Common ID between the FSPs for the bulk quote object, decided by the Payer FSP. The ID should be reused for resends of the same bulk quote. A new ID should be generated for each new bulk quote."
        },
        "payer": {
          "$ref": "#/definitions/Party",
          "description": "Information about the Payer in the proposed financial transaction."
        },
        "geoCode": {
          "$ref": "#/definitions/GeoCode",
          "description": "Longitude and Latitude of the initiating Party. Can be used to detect fraud."
        },
        "expiration": {
          "type": "string",
          "description": "Expiration is optional to let the Payee FSP know when a quote no longer needs to be returned."
        },
        "individualQuotes": {
          "type": "array",
          "minItems": 1,
          "maxItems": 1000,
          "items": {
            "$ref": "#/definitions/IndividualQuote"
          },
          "description": "List of quotes elements."
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList",
          "description": "Optional extension, specific to deployment."
        }
      },
      "required": [
        "bulkQuoteId",
        "payer",
        "individualQuotes"
      ]
    },
    "BulkQuotesIDPutResponse": {
      "title": "BulkQuotesIDPutResponse",
      "type": "object",
      "description": "PUT /bulkQuotes/{ID} object",
      "properties": {
        "individualQuoteResults": {
          "type": "array",
          "maxItems": 1000,
          "items": {
            "$ref": "#/definitions/IndividualQuoteResult"
          },
          "description": "Fees for each individual transaction, if any of them are charged per transaction."
        },
        "expiration": {
          "type": "string",
          "description": "Date and time until when the quotation is valid and can be honored when used in the subsequent transaction request."
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList",
          "description": "Optional extension, specific to deployment."
        }
      },
      "required": [
        "expiration"
      ]
    },
    "BulkTransfersPostRequest": {
      "title": "BulkTransfersPostRequest",
      "type": "object",
      "description": "POST /bulkTransfers object",
      "properties": {
        "bulkTransferId": {
          "type": "string",
          "description": "Common ID between the FSPs and the optional Switch for the bulk transfer object, decided by the Payer FSP. The ID should be reused for resends of the same bulk transfer. A new ID should be generated for each new bulk transfer."
        },
        "bulkQuoteId": {
          "type": "string",
          "description": "ID of the related bulk quote."
        },
        "payerFsp": {
          "type": "string",
          "description": "Payer FSP identifier."
        },
        "payeeFsp": {
          "type": "string",
          "description": "Payee FSP identifier."
        },
        "individualTransfers": {
          "type": "array",
          "minItems": 1,
          "maxItems": 1000,
          "items": {
            "$ref": "#/definitions/IndividualTransfer"
          },
          "description": "List of IndividualTransfer elements."
        },
        "expiration": {
          "type": "string",
          "description": "Expiration time of the transfers."
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList",
          "description": "Optional extension, specific to deployment."
        }
      },
      "required": [
        "bulkTransferId",
        "bulkQuoteId",
        "payerFsp",
        "payeeFsp",
        "individualTransfers",
        "expiration"
      ]
    },
    "BulkTransfersIDPutResponse": {
      "title": "BulkTransfersIDPutResponse",
      "type": "object",
      "description": "PUT /bulkTransfers/{ID} object",
      "properties": {
        "completedTimestamp": {
          "type": "string",
          "description": "Time and date when the bulk transaction was completed."
        },
        "individualTransferResults": {
          "type": "array",
          "maxItems": 1000,
          "items": {
            "$ref": "#/definitions/IndividualTransferResult"
          },
          "description": "List of IndividualTransferResult elements."
        },
        "bulkTransferState": {
          "type": "string",
          "description": "The state of the bulk transfer."
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList",
          "description": "Optional extension, specific to deployment."
        }
      },
      "required": [
        "bulkTransferState"
      ]
    },
    "ErrorInformation": {
      "title": "ErrorInformation",
      "type": "object",
      "description": "Data model for the complex type ErrorInformation.",
      "properties": {
        "errorCode": {
          "type": "string",
          "description": "Specific error number.",
          "pattern": "^(10|20|3[0-4]|4[0-4]|5[0-4])[0-9]{2}$"
        },
        "errorDescription": {
          "type": "string",
          "description": "Error description string."
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList",
          "description": "Optional list of extensions, specific to deployment."
        }
      },
      "required": [
        "errorCode",
        "errorDescription"
      ]
    },
    "ErrorInformationObject": {
      "title": "ErrorInformationObject",
      "type": "object",
      "description": "Data model for the complex type object that contains ErrorInformation.",
      "properties": {
        "errorInformation": {
          "$ref": "#/definitions/ErrorInformation"
        }
      },
      "required": [
        "errorInformation"
      ]
    },
    "ErrorInformationResponse": {
      "title": "ErrorInformationResponse",
      "type": "object",
      "description": "Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.",
      "properties": {
        "errorInformation": {
          "$ref": "#/definitions/ErrorInformation"
        }
      }
    },
    "Extension": {
      "title": "Extension",
      "type": "object",
      "description": "Data model for the complex type Extension",
      "properties": {
        "key": {
          "type": "string",
          "description": "Extension key."
        },
        "value": {
          "type": "string",
          "description": "Extension value."
        }
      },
      "required": [
        "key",
        "value"
      ]
    },
    "ExtensionList": {
      "title": "ExtensionList",
      "type": "object",
      "description": "Data model for the complex type ExtensionList",
      "properties": {
        "extension": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "minItems": 1,
          "maxItems": 16,
          "description": "Number of Extension elements"
        }
      },
      "required": [
        "extension"
      ]
    },
    "GeoCode": {
      "title": "GeoCode",
      "type": "object",
      "description": "Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.",
      "properties": {
        "latitude": {
          "type": "string",
          "description": "Latitude of the Party."
        },
        "longitude": {
          "type": "string",
          "description": "Longitude of the   Party."
        }
      },
      "required": [
        "latitude",
        "longitude"
      ]
    },
    "HealthServicesType":{
      "title": "HealthServicesType",
      "type": "object",
      "description": "Data model for the complex type HealthServicesType. Contains health services information.",
      "properties": {
        "name": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/HealthStatusType"
        }
      }
    },
    "IndividualQuote": {
      "title": "IndividualQuote",
      "type": "object",
      "description": "Data model for the complex type IndividualQuote.",
      "properties": {
        "quoteId": {
          "type": "string",
          "description": "Identifies quote message."
        },
        "transactionId": {
          "type": "string",
          "description": "Identifies transaction message."
        },
        "payee": {
          "$ref": "#/definitions/Party",
          "description": "Information about the Payee in the proposed financial transaction."
        },
        "amountType": {
          "type": "string",
          "description": "SEND for sendAmount, RECEIVE for receiveAmount."
        },
        "amount": {
          "$ref": "#/definitions/Money",
          "description": "Depending on amountType - If SEND - The amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees. The amount is updated by each participating entity in the transaction. If RECEIVE - The amount the Payee should receive, that is, the amount that should be sent to the receiver exclusive any fees. The amount is not updated by any of the participating entities."
        },
        "fees": {
          "$ref": "#/definitions/Money",
          "description": "The fees in the transaction. The fees element should be empty if fees should be non-disclosed. The fees element should be non-empty if fees should be disclosed."
        },
        "transactionType": {
          "$ref": "#/definitions/TransactionType",
          "description": "Type of transaction that the quote is requested for."
        },
        "note": {
          "type": "string",
          "description": "Memo that will be attached to the transaction."
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList",
          "description": "Optional extension, specific to deployment."
        }
      },
      "required": [
        "quoteId",
        "transactionId",
        "payee",
        "amountType",
        "amount",
        "transactionType"
      ]
    },
    "IndividualQuoteResult": {
      "title": "IndividualQuoteResult",
      "type": "object",
      "description": "Data model for the complex type IndividualQuoteResult.",
      "properties": {
        "quoteId": {
          "type": "string",
          "description": "Identifies quote message."
        },
        "payee": {
          "$ref": "#/definitions/Party",
          "description": "Information about the Payee in the proposed financial transaction."
        },
        "transferAmount": {
          "$ref": "#/definitions/Money",
          "description": "Amount that the Payee FSP should receive."
        },
        "payeeReceiveAmount": {
          "$ref": "#/definitions/Money",
          "description": "Amount that the Payee should receive in the end-to-end transaction. Optional as the Payee FSP might not want to disclose any optional Payee fees."
        },
        "payeeFspFee": {
          "$ref": "#/definitions/Money",
          "description": "Payee FSP’s part of the transaction fee."
        },
        "payeeFspCommission": {
          "$ref": "#/definitions/Money",
          "description": "Transaction commission from the Payee FSP"
        },
        "ilpPacket": {
          "type": "string",
          "description": "The ILP Packet that must be attached to the transfer by the Payer."
        },
        "condition": {
          "type": "string",
          "description": "The condition that must be attached to the transfer by the Payer."
        },
        "errorInformation": {
          "$ref": "#/definitions/ErrorInformation",
          "description": "Error code, category description. Note - receiveAmount, payeeFspFee, payeeFspCommission, expiration, ilpPacket, condition should not be set if errorInformation is set."
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList",
          "description": "Optional extension, specific to deployment."
        }
      },
      "required": [
        "quoteId"
      ]
    },
    "IndividualTransfer": {
      "title": "IndividualTransfer",
      "type": "object",
      "description": "Data model for the complex type IndividualTransfer.",
      "properties": {
        "transferId": {
          "type": "string",
          "description": "Identifies messages related to the same /transfers sequence."
        },
        "transferAmount": {
          "$ref": "#/definitions/Money",
          "description": "Transaction amount to be sent."
        },
        "ilpPacket": {
          "type": "string",
          "description": "ILP Packet containing the amount delivered to the Payee and the ILP Address of the Payee and any other end-to-end data."
        },
        "condition": {
          "type": "string",
          "description": "Condition that must be fulfilled to commit the transfer."
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList",
          "description": "Optional extension, specific to deployment."
        }
      },
      "required": [
        "transferId",
        "transferAmount",
        "ilpPacket",
        "condition"
      ]
    },
    "IndividualTransferResult": {
      "title": "IndividualTransferResult",
      "type": "object",
      "description": "Data model for the complex type IndividualTransferResult.",
      "properties": {
        "transferId": {
          "type": "string",
          "description": "Identifies messages related to the same /transfers sequence."
        },
        "fulfilment": {
          "type": "string",
          "description": "Fulfilment of the condition specified with the transaction. Note - Either fulfilment or errorInformation should be set, not both."
        },
        "errorInformation": {
          "$ref": "#/definitions/ErrorInformation",
          "description": "If transfer is REJECTED, error information may be provided. Note - Either fulfilment or errorInformation should be set, not both."
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList",
          "description": "Optional extension, specific to deployment."
        }
      },
      "required": [
        "transferId"
      ]
    },
    "Money": {
      "title": "Money",
      "type": "object",
      "description": "Data model for the complex type Money.",
      "properties": {
        "currency": {
          "$ref": "#/definitions/Currency",
          "type": "string",
          "description": "Currency of the amount."
        },
        "amount": {
          "type": "string",
          "description": "Amount of Money."
        }
      },
      "required": [
        "currency",
        "amount"
      ]
    },
    "ParticipantsTypeIDSubIDPostRequest": {
      "title": "ParticipantsTypeIDSubIDPostRequest",
      "type": "object",
      "description": "POST /participants/{Type}/{ID}/{SubId}, /participants/{Type}/{ID} object",
      "properties": {
        "fspId": {
          "type": "string",
          "description": "FSP Identifier that the Party belongs to.",
          "minLength": 1,
          "maxLength": 32
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "type": "string",
          "description": "Indicate that the provided Currency is supported by the Party."
        }
      },
      "required": [
        "fspId"
      ]
    },
    "ParticipantsTypeIDPutResponse": {
      "title": "ParticipantsTypeIDPutResponse",
      "type": "object",
      "description": "PUT /participants/{Type}/{ID}/{SubId}, /participants/{Type}/{ID} object",
      "properties": {
        "fspId": {
          "type": "string",
          "description": "FSP Identifier that the Party belongs to.",
          "minLength": 1,
          "maxLength": 32
        }
      }
    },
    "ParticipantsIDPutResponse": {
      "title": "ParticipantsIDPutResponse",
      "type": "object",
      "description": "PUT /participants/{ID} object",
      "properties": {
        "partyList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartyResult"
          },
          "minItems": 1,
          "maxItems": 10000,
          "description": "List of PartyResult elements that were either created or failed to be created."
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "type": "string",
          "description": "Indicate that the provided Currency was set to be supported by each successfully added PartyIdInfo."
        }
      },
      "required": [
        "partyList"
      ]
    },
    "ParticipantsPostRequest": {
      "title": "ParticipantsPostRequest",
      "type": "object",
      "description": "POST /participants object",
      "properties": {
        "requestId": {
          "type": "string",
          "description": "The ID of the request, decided by the client. Used for identification of the callback from the server."
        },
        "partyList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartyIdInfo"
          },
          "minItems": 1,
          "maxItems": 10000,
          "description": "List of PartyIdInfo elements that the client would like to update or create FSP information about."
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "type": "string",
          "description": "Indicate that the provided Currency is supported by each PartyIdInfo in the list."
        }
      },
      "required": [
        "requestId",
        "partyList"
      ]
    },
    "Party": {
      "title": "Party",
      "type": "object",
      "description": "Data model for the complex type Party.",
      "properties": {
        "partyIdInfo": {
          "$ref": "#/definitions/PartyIdInfo",
          "description": "Party Id type, id, sub ID or type, and FSP Id."
        },
        "merchantClassificationCode": {
          "type": "string",
          "description": "Used in the context of Payee Information, where the Payee happens to be a merchant accepting merchant payments."
        },
        "name": {
          "type": "string",
          "description": "Display name of the Party, could be a real name or a nick name."
        },
        "personalInfo": {
          "$ref": "#/definitions/PartyPersonalInfo",
          "description": "Personal information used to verify identity of Party such as first, middle, last name and date of birth."
        }
      },
      "required": [
        "partyIdInfo"
      ]
    },
    "PartyComplexName": {
      "title": "PartyComplexName",
      "type": "object",
      "description": "Data model for the complex type PartyComplexName.",
      "properties": {
        "firstName": {
          "type": "string",
          "description": "Party’s first name."
        },
        "middleName": {
          "type": "string",
          "description": "Party’s middle name."
        },
        "lastName": {
          "type": "string",
          "description": "Party’s last name."
        }
      }
    },
    "PartyIdInfo": {
      "title": "PartyIdInfo",
      "type": "object",
      "description": "Data model for the complex type PartyIdInfo.",
      "properties": {
        "partyIdType": {
          "type": "string",
          "description": "Type of the identifier."
        },
        "partyIdentifier": {
          "type": "string",
          "description": "An identifier for the Party."
        },
        "partySubIdOrType": {
          "type": "string",
          "description": "A sub-identifier or sub-type for the Party."
        },
        "fspId": {
          "type": "string",
          "description": "FSP ID (if known)",
          "minLength": 1,
          "maxLength": 32
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList",
          "description": "Optional extension, specific to deployment."
        }
      },
      "required": [
        "partyIdType",
        "partyIdentifier"
      ]
    },
    "PartiesTypeIDPutResponse": {
      "title": "PartiesTypeIDPutResponse",
      "type": "object",
      "description": "PUT /parties/{Type}/{ID} object",
      "properties": {
        "party": {
          "$ref": "#/definitions/Party",
          "description": "Information regarding the requested Party."
        }
      },
      "required": [
        "party"
      ]
    },
    "PartyPersonalInfo": {
      "title": "PartyPersonalInfo",
      "type": "object",
      "description": "Data model for the complex type PartyPersonalInfo.",
      "properties": {
        "complexName": {
          "$ref": "#/definitions/PartyComplexName",
          "description": "First, middle and last name for the Party."
        },
        "dateOfBirth": {
          "type": "string",
          "description": "Date of birth for the Party."
        }
      }
    },
    "PartyResult": {
      "title": "PartyResult",
      "type": "object",
      "description": "Data model for the complex type PartyResult.",
      "properties": {
        "partyId": {
          "$ref": "#/definitions/PartyIdInfo",
          "description": "Party Id type, id, sub ID or type, and FSP Id."
        },
        "errorInformation": {
          "$ref": "#/definitions/ErrorInformation",
          "description": "If the Party failed to be added, error information should be provided. Otherwise, this parameter should be empty to indicate success."
        }
      },
      "required": [
        "partyId"
      ]
    },
    "QuotesPostRequest": {
      "title": "QuotesPostRequest",
      "type": "object",
      "description": "POST /quotes object",
      "properties": {
        "quoteId": {
          "type": "string",
          "description": "Common ID between the FSPs for the quote object, decided by the Payer FSP. The ID should be reused for resends of the same quote for a transaction. A new ID should be generated for each new quote for a transaction."
        },
        "transactionId": {
          "type": "string",
          "description": "Common ID (decided by the Payer FSP) between the FSPs for the future transaction object. The actual transaction will be created as part of a successful transfer process. The ID should be reused for resends of the same quote for a transaction. A new ID should be generated for each new quote for a transaction."
        },
        "transactionRequestId": {
          "type": "string",
          "description": "Identifies an optional previously-sent transaction request."
        },
        "payee": {
          "$ref": "#/definitions/Party",
          "description": "Information about the Payee in the proposed financial transaction."
        },
        "payer": {
          "$ref": "#/definitions/Party",
          "description": "Information about the Payer in the proposed financial transaction."
        },
        "amountType": {
          "type": "string",
          "description": "SEND for send amount, RECEIVE for receive amount."
        },
        "amount": {
          "$ref": "#/definitions/Money",
          "description": "Depending on amountType. If SEND - The amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees. The amount is updated by each participating entity in the transaction. If RECEIVE - The amount the Payee should receive, that is, the amount that should be sent to the receiver exclusive any fees. The amount is not updated by any of the participating entities."
        },
        "fees": {
          "$ref": "#/definitions/Money",
          "description": "The fees in the transaction. The fees element should be empty if fees should be non-disclosed. The fees element should be non-empty if fees should be disclosed."
        },
        "transactionType": {
          "$ref": "#/definitions/TransactionType",
          "description": "Type of transaction for which the quote is requested."
        },
        "geoCode": {
          "$ref": "#/definitions/GeoCode",
          "description": "Longitude and Latitude of the initiating Party. Can be used to detect fraud."
        },
        "note": {
          "type": "string",
          "description": "A memo that will be attached to the transaction."
        },
        "expiration": {
          "type": "string",
          "description": "Expiration is optional. It can be set to get a quick failure in case the peer FSP takes too long to respond. Also, it may be beneficial for Consumer, Agent, and Merchant to know that their request has a time limit."
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList",
          "description": "Optional extension, specific to deployment."
        }
      },
      "required": [
        "quoteId",
        "transactionId",
        "payee",
        "payer",
        "amountType",
        "amount",
        "transactionType"
      ]
    },
    "QuotesIDPutResponse": {
      "title": "QuotesIDPutResponse",
      "type": "object",
      "description": "PUT /quotes/{ID} object",
      "properties": {
        "transferAmount": {
          "$ref": "#/definitions/Money",
          "description": "The amount of money that the Payee FSP should receive."
        },
        "payeeReceiveAmount": {
          "$ref": "#/definitions/Money",
          "description": "The amount of Money that the Payee should receive in the end-to-end transaction. Optional as the Payee FSP might not want to disclose any optional Payee fees."
        },
        "payeeFspFee": {
          "$ref": "#/definitions/Money",
          "description": "Payee FSP’s part of the transaction fee."
        },
        "payeeFspCommission": {
          "$ref": "#/definitions/Money",
          "description": "Transaction commission from the Payee FSP."
        },
        "expiration": {
          "type": "string",
          "description": "Date and time until when the quotation is valid and can be honored when used in the subsequent transaction."
        },
        "geoCode": {
          "$ref": "#/definitions/GeoCode",
          "description": "Longitude and Latitude of the Payee. Can be used to detect fraud."
        },
        "ilpPacket": {
          "type": "string",
          "description": "The ILP Packet that must be attached to the transfer by the Payer."
        },
        "condition": {
          "type": "string",
          "description": "The condition that must be attached to the transfer by the Payer."
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList",
          "description": "Optional extension, specific to deployment."
        }
      },
      "required": [
        "transferAmount",
        "expiration",
        "ilpPacket",
        "condition"
      ]
    },
    "Refund": {
      "title": "Refund",
      "type": "object",
      "description": "Data model for the complex type Refund.",
      "properties": {
        "originalTransactionId": {
          "type": "string",
          "description": "Reference to the original transaction ID that is requested to be refunded."
        },
        "refundReason": {
          "type": "string",
          "description": "Free text indicating the reason for the refund."
        }
      },
      "required": [
        "originalTransactionId"
      ]
    },
    "Transaction": {
      "title": "Transaction",
      "type": "object",
      "description": "Data model for the complex type Transaction. The Transaction type is used to carry end-to-end data between the Payer FSP and the Payee FSP in the ILP Packet. Both the transactionId and the quoteId in the data model are decided by the Payer FSP in the POST /quotes.",
      "properties": {
        "transactionId": {
          "type": "string",
          "description": "ID of the transaction, the ID is decided by the Payer FSP during the creation of the quote."
        },
        "quoteId": {
          "type": "string",
          "description": "ID of the quote, the ID is decided by the Payer FSP during the creation of the quote."
        },
        "payee": {
          "$ref": "#/definitions/Party",
          "description": "Information about the Payee in the proposed financial transaction."
        },
        "payer": {
          "$ref": "#/definitions/Party",
          "description": "Information about the Payer in the proposed financial transaction."
        },
        "amount": {
          "$ref": "#/definitions/Money",
          "description": "Transaction amount to be sent."
        },
        "transactionType": {
          "$ref": "#/definitions/TransactionType",
          "description": "Type of the transaction."
        },
        "note": {
          "type": "string",
          "description": "Memo associated to the transaction, intended to the Payee."
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList",
          "description": "Optional extension, specific to deployment."
        }
      },
      "required": [
        "transactionId",
        "quoteId",
        "payee",
        "payer",
        "amount",
        "transactionType"
      ]
    },
    "TransactionRequestsIDPutResponse": {
      "title": "TransactionRequestsIDPutResponse",
      "type": "object",
      "description": "PUT /transactionRequests/{ID} object",
      "properties": {
        "transactionId": {
          "type": "string",
          "description": "Identifies a related transaction (if a transaction has been created)."
        },
        "transactionRequestState": {
          "type": "string",
          "description": "State of the transaction request."
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList",
          "description": "Optional extension, specific to deployment."
        }
      },
      "required": [
        "transactionRequestState"
      ]
    },
    "TransactionsIDPutResponse": {
      "title": "TransactionsIDPutResponse",
      "type": "object",
      "description": "PUT /transactions/{ID} object",
      "properties": {
        "completedTimestamp": {
          "type": "string",
          "description": "Time and date when the transaction was completed."
        },
        "transactionState": {
          "type": "string",
          "description": "State of the transaction."
        },
        "code": {
          "type": "string",
          "description": "Optional redemption information provided to Payer after transaction has been completed."
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList",
          "description": "Optional extension, specific to deployment."
        }
      },
      "required": [
        "transactionState"
      ]
    },
    "TransactionType": {
      "title": "TransactionType",
      "type": "object",
      "description": "Data model for the complex type TransactionType.",
      "properties": {
        "scenario": {
          "type": "string",
          "description": "Deposit, withdrawal, refund, …"
        },
        "subScenario": {
          "type": "string",
          "description": "Possible sub-scenario, defined locally within the scheme."
        },
        "initiator": {
          "type": "string",
          "description": "Who is initiating the transaction - Payer or Payee"
        },
        "initiatorType": {
          "type": "string",
          "description": "Consumer, agent, business, …"
        },
        "refundInfo": {
          "$ref": "#/definitions/Refund",
          "description": "Extra information specific to a refund scenario. Should only be populated if scenario is REFUND"
        },
        "balanceOfPayments": {
          "type": "string",
          "description": "Balance of Payments code."
        }
      },
      "required": [
        "scenario",
        "initiator",
        "initiatorType"
      ]
    },
    "TransfersPostRequest": {
      "title": "TransfersPostRequest",
      "type": "object",
      "description": "POST /transfers Request object",
      "properties": {
        "transferId": {
          "type": "string",
          "description": "The common ID between the FSPs and the optional Switch for the transfer object, decided by the Payer FSP. The ID should be reused for resends of the same transfer. A new ID should be generated for each new transfer."
        },
        "payeeFsp": {
          "type": "string",
          "description": "Payee FSP in the proposed financial transaction."
        },
        "payerFsp": {
          "type": "string",
          "description": "Payer FSP in the proposed financial transaction."
        },
        "amount": {
          "$ref": "#/definitions/Money",
          "description": "The transfer amount to be sent."
        },
        "ilpPacket": {
          "type": "string",
          "description": "The ILP Packet containing the amount delivered to the Payee and the ILP Address of the Payee and any other end-to-end data."
        },
        "condition": {
          "type": "string",
          "description": "The condition that must be fulfilled to commit the transfer."
        },
        "expiration": {
          "type": "string",
          "description": "Expiration can be set to get a quick failure expiration of the transfer. The transfer should be rolled back if no fulfilment is delivered before this time."
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList",
          "description": "Optional extension, specific to deployment."
        }
      },
      "required": [
        "transferId",
        "payeeFsp",
        "payerFsp",
        "amount",
        "ilpPacket",
        "condition",
        "expiration"
      ]
    },
    "TransactionRequestsPostRequest": {
      "title": "TransactionRequestsPostRequest",
      "type": "object",
      "description": "POST /transactionRequests object",
      "properties": {
        "transactionRequestId": {
          "type": "string",
          "description": "Common ID between the FSPs for the transaction request object, decided by the Payee FSP. The ID should be reused for resends of the same transaction request. A new ID should be generated for each new transaction request."
        },
        "payee": {
          "$ref": "#/definitions/Party",
          "description": "Information about the Payee in the proposed financial transaction."
        },
        "payer": {
          "$ref": "#/definitions/PartyIdInfo",
          "description": "Information about the Payer type, id, sub-type/id, FSP Id in the proposed financial transaction."
        },
        "amount": {
          "$ref": "#/definitions/Money",
          "description": "Requested amount to be transferred from the Payer to Payee."
        },
        "transactionType": {
          "$ref": "#/definitions/TransactionType",
          "description": "Type of transaction."
        },
        "note": {
          "type": "string",
          "description": "Reason for the transaction request, intended to the Payer."
        },
        "geoCode": {
          "$ref": "#/definitions/GeoCode",
          "description": "Longitude and Latitude of the initiating Party. Can be used to detect fraud."
        },
        "authenticationType": {
          "type": "string",
          "description": "OTP or QR Code, otherwise empty."
        },
        "expiration": {
          "type": "string",
          "description": "Can be set to get a quick failure in case the peer FSP takes too long to respond. Also, it may be beneficial for Consumer, Agent, Merchant to know that their request has a time limit."
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList",
          "description": "Optional extension, specific to deployment."
        }
      },
      "required": [
        "transactionRequestId",
        "payee",
        "payer",
        "amount",
        "transactionType"
      ]
    },
    "TransfersIDPutResponse": {
      "title": "TransfersIDPutResponse",
      "type": "object",
      "description": "PUT /transfers/{ID} object",
      "properties": {
        "fulfilment": {
          "type": "string",
          "description": "Fulfilment of the condition specified with the transaction. Mandatory if transfer has completed successfully."
        },
        "completedTimestamp": {
          "type": "string",
          "description": "Time and date when the transaction was completed."
        },
        "transferState": {
          "type": "string",
          "description": "State of the transfer."
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList",
          "description": "Optional extension, specific to deployment."
        }
      },
      "required": [
        "transferState"
      ]
    },
    "Status": {
      "title": "Status",
      "type": "object",
      "description": "Data model for the api status.",
      "properties": {
        "status": {
          "type": "string",
          "description": "The return status, usually \"OK\""
        },
        "uptime": {
          "type": "number",
          "description": "The amount of time in seconds that the server has been up for."
        },
        "startTime": {
          "type": "string",
          "description": "The UTC time that the server started up"
        },
        "versionNumber": {
          "type": "string",
          "description": "Current version of the API"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthServicesType"
          },
          "description": "An list of the statuses of services that the API requires"
        }
      }
    }
  },
  "responses": {
    "Response200": {
      "description": "OK"
    },
    "ResponseHealth200": {
      "description": "OK",
      "schema": {
        "$ref": "#/definitions/Status"
      }
    },
    "Response202": {
      "description": "Accepted"
    },
    "ErrorResponse400": {
      "description": "Bad Request - The application cannot process the request; for example, due to malformed syntax or the payload exceeded size restrictions.",
      "schema": {
        "$ref": "#/definitions/ErrorInformationResponse"
      },
      "headers": {
        "Content-Length": {
          "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
          "type": "integer"
        },
        "Content-Type": {
          "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
          "type": "string"
        }
      }
    },
    "ErrorResponse401": {
      "description": "Unauthorized - The request requires authentication in order to be processed.",
      "schema": {
        "$ref": "#/definitions/ErrorInformationResponse"
      },
      "headers": {
        "Content-Length": {
          "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
          "type": "integer"
        },
        "Content-Type": {
          "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
          "type": "string"
        }
      }
    },
    "ErrorResponse403": {
      "description": "Forbidden - The request was denied and will be denied in the future.",
      "schema": {
        "$ref": "#/definitions/ErrorInformationResponse"
      },
      "headers": {
        "Content-Length": {
          "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
          "type": "integer"
        },
        "Content-Type": {
          "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
          "type": "string"
        }
      }
    },
    "ErrorResponse404": {
      "description": "Not Found - The resource specified in the URI was not found.",
      "schema": {
        "$ref": "#/definitions/ErrorInformationResponse"
      },
      "headers": {
        "Content-Length": {
          "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
          "type": "integer"
        },
        "Content-Type": {
          "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
          "type": "string"
        }
      }
    },
    "ErrorResponse405": {
      "description": "Method Not Allowed - An unsupported HTTP method for the request was used.",
      "schema": {
        "$ref": "#/definitions/ErrorInformationResponse"
      },
      "headers": {
        "Content-Length": {
          "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
          "type": "integer"
        },
        "Content-Type": {
          "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
          "type": "string"
        }
      }
    },
    "ErrorResponse406": {
      "description": "Not acceptable - The server is not capable of generating content according to the Accept headers sent in the request. Used in the API to indicate that the server does not support the version that the client is requesting.",
      "schema": {
        "$ref": "#/definitions/ErrorInformationResponse"
      },
      "headers": {
        "Content-Length": {
          "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
          "type": "integer"
        },
        "Content-Type": {
          "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
          "type": "string"
        }
      }
    },
    "ErrorResponse501": {
      "description": "Not Implemented - The server does not support the requested service. The client should not retry.",
      "schema": {
        "$ref": "#/definitions/ErrorInformationResponse"
      },
      "headers": {
        "Content-Length": {
          "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
          "type": "integer"
        },
        "Content-Type": {
          "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
          "type": "string"
        }
      }
    },
    "ErrorResponse503": {
      "description": "Service Unavailable - The server is currently unavailable to accept any new service requests. This should be a temporary state, and the client should retry within a reasonable time frame.",
      "schema": {
        "$ref": "#/definitions/ErrorInformationResponse"
      },
      "headers": {
        "Content-Length": {
          "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
          "type": "integer"
        },
        "Content-Type": {
          "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "Accept": {
      "name": "accept",
      "in": "header",
      "required": true,
      "type": "string",
      "description": "The Accept header field indicates the version of the API the client would like the server to use."
    },
    "Accept-Optional": {
      "name": "accept",
      "in": "header",
      "required": false,
      "type": "string",
      "description": "The Accept header field indicates the version of the API the client would like the server to use."
    },
    "Content-Length": {
      "name": "content-length",
      "in": "header",
      "required": false,
      "type": "integer",
      "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)"
    },
    "Content-Type": {
      "name": "content-type",
      "in": "header",
      "type": "string",
      "required": true,
      "description": "The Content-Type header indicates the specific version of the API used to send the payload body."
    },
    "Date": {
      "name": "date",
      "in": "header",
      "type": "string",
      "required": true,
      "description": "The Date header field indicates the date when the request was sent."
    },
    "X-Forwarded-For": {
      "name": "x-forwarded-for",
      "in": "header",
      "type": "string",
      "required": false,
      "description": "The X-Forwarded-For header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple X-Forwarded-For values as in the example shown here should be expected and supported by implementers of the API. Note - An alternative to X-Forwarded-For is defined in RFC 7239. However, to this point RFC 7239 is less-used and supported than X-Forwarded-For."
    },
    "FSPIOP-Source": {
      "name": "fspiop-source",
      "in": "header",
      "type": "string",
      "required": true,
      "description": "The FSPIOP-Source header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field FSPIOP-Signature)."
    },
    "FSPIOP-Destination-Required": {
      "name": "fspiop-destination",
      "in": "header",
      "type": "string",
      "required": true,
      "description": "The FSPIOP-Destination header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field should be set by the original sender of the request (if known), so that any entities between the client and the server do not need to parse the payload for routing purposes."
    },
    "FSPIOP-Destination-Optional": {
      "name": "fspiop-destination",
      "in": "header",
      "type": "string",
      "required": false,
      "description": "The FSPIOP-Destination header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field should be set by the original sender of the request (if known), so that any entities between the client and the server do not need to parse the payload for routing purposes."
    },
    "FSPIOP-Encryption": {
      "name": "fspiop-encryption",
      "in": "header",
      "type": "string",
      "required": false,
      "description": "The FSPIOP-Encryption header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request."
    },
    "FSPIOP-Signature": {
      "name": "fspiop-signature",
      "in": "header",
      "type": "string",
      "required": false,
      "description": "The FSPIOP-Signature header field is a non-HTTP standard field used by the API for applying an end-to-end request signature."
    },
    "FSPIOP-URI": {
      "name": "fspiop-uri",
      "in": "header",
      "type": "string",
      "required": false,
      "description": "The FSPIOP-URI header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information see API Signature document."
    },
    "FSPIOP-HTTP-Method": {
      "name": "fspiop-http-method",
      "in": "header",
      "type": "string",
      "required": false,
      "description": "The FSPIOP-HTTP-Method header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information see API Signature document."
    },
    "ID": {
      "name": "ID",
      "in": "path",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 128
    },
    "Type": {
      "name": "Type",
      "in": "path",
      "required": true,
      "type": "string",
      "enum": [
        "MSISDN",
        "EMAIL",
        "PERSONAL_ID",
        "BUSINESS",
        "DEVICE",
        "ACCOUNT_ID",
        "IBAN",
        "ALIAS"
      ]
    },
    "SubId": {
      "name": "SubId",
      "in": "path",
      "required": true,
      "type": "string"
    }
  }
}