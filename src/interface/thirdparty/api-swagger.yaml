openapi: 3.0.1
info:
  title: Open API for FSP Interoperability (FSPIOP) (Implementation Friendly Version)
  description: Based on API Definition.docx Version 1.1 that was confirmed on 2020-05-19.
    Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP
    header.
  license:
    name: Open API for FSP Interoperability (FSPIOP) (Implementation Friendly Version)
  version: "1.1"
servers:
  - url: /
paths:
  /participants/{ID}/error:
    put:
      tags:
        - participants
        - sampled
      summary: ParticipantsByIDAndError
      description: If there is an error during FSP information creation in the server,
        the error callback PUT /participants/<ID>/error is used. The <ID> in the URI
        should contain the requestId that was used for the creation of the participant
        information.
      operationId: ParticipantsErrorByIDPut
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Content-Length'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/Date'
        - $ref: '#/components/parameters/X-Forwarded-For'
        - $ref: '#/components/parameters/FSPIOP-Source'
        - $ref: '#/components/parameters/FSPIOP-Destination-Optional'
        - $ref: '#/components/parameters/FSPIOP-Encryption'
        - $ref: '#/components/parameters/FSPIOP-Signature'
        - $ref: '#/components/parameters/FSPIOP-URI'
        - $ref: '#/components/parameters/FSPIOP-HTTP-Method'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorInformationObject'
        required: true
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
  /participants/{ID}:
    put:
      tags:
        - participants
        - sampled
      summary: ParticipantsByID
      description: The callback PUT /participants/<ID> is used to inform the client
        of the result of the creation of the provided list of identities.
      operationId: ParticipantsByIDPut
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Content-Length'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/Date'
        - $ref: '#/components/parameters/X-Forwarded-For'
        - $ref: '#/components/parameters/FSPIOP-Source'
        - $ref: '#/components/parameters/FSPIOP-Destination-Optional'
        - $ref: '#/components/parameters/FSPIOP-Encryption'
        - $ref: '#/components/parameters/FSPIOP-Signature'
        - $ref: '#/components/parameters/FSPIOP-URI'
        - $ref: '#/components/parameters/FSPIOP-HTTP-Method'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantsIDPutResponse'
        required: true
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
  /participants/{Type}/{ID}/error:
    put:
      tags:
        - participants
        - sampled
      summary: ParticipantsErrorByTypeAndID
      description: If the server is unable to find, create or delete the associated
        FSP of the provided identity, or another processing error occurred, the error
        callback PUT /participants/<Type>/<ID>/error (or PUT /participants/<Type>/<ID>/<SubId>/error)
        is used.
      operationId: ParticipantsErrorByTypeAndIDPut
      parameters:
        - $ref: '#/components/parameters/Type'
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Content-Length'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/Date'
        - $ref: '#/components/parameters/X-Forwarded-For'
        - $ref: '#/components/parameters/FSPIOP-Source'
        - $ref: '#/components/parameters/FSPIOP-Destination-Optional'
        - $ref: '#/components/parameters/FSPIOP-Encryption'
        - $ref: '#/components/parameters/FSPIOP-Signature'
        - $ref: '#/components/parameters/FSPIOP-URI'
        - $ref: '#/components/parameters/FSPIOP-HTTP-Method'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorInformationObject'
        required: true
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
  /participants/{Type}/{ID}/{SubId}/error:
    put:
      tags:
        - participants
        - sampled
      summary: ParticipantsSubIdErrorByTypeAndID
      description: If the server is unable to find, create or delete the associated
        FSP of the provided identity, or another processing error occurred, the error
        callback PUT /participants/<Type>/<ID>/error (or PUT /participants/<Type>/<ID>/<SubId>/error)
        is used.
      operationId: ParticipantsErrorBySubIdTypeAndIDPut
      parameters:
        - $ref: '#/components/parameters/Type'
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/SubId'
        - $ref: '#/components/parameters/Content-Length'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/Date'
        - $ref: '#/components/parameters/X-Forwarded-For'
        - $ref: '#/components/parameters/FSPIOP-Source'
        - $ref: '#/components/parameters/FSPIOP-Destination-Optional'
        - $ref: '#/components/parameters/FSPIOP-Encryption'
        - $ref: '#/components/parameters/FSPIOP-Signature'
        - $ref: '#/components/parameters/FSPIOP-URI'
        - $ref: '#/components/parameters/FSPIOP-HTTP-Method'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorInformationObject'
        required: true
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
  /participants/{Type}/{ID}/{SubId}:
    parameters:
      - $ref: '#/components/parameters/Type'
      - $ref: '#/components/parameters/ID'
      - $ref: '#/components/parameters/SubId'
      - $ref: '#/components/parameters/Content-Type'
      - $ref: '#/components/parameters/Date'
      - $ref: '#/components/parameters/X-Forwarded-For'
      - $ref: '#/components/parameters/FSPIOP-Source'
      - $ref: '#/components/parameters/FSPIOP-Destination-Optional'
      - $ref: '#/components/parameters/FSPIOP-Encryption'
      - $ref: '#/components/parameters/FSPIOP-Signature'
      - $ref: '#/components/parameters/FSPIOP-URI'
      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'
    get:
      tags:
        - participants
        - sampled
      summary: ParticipantsSubIdByTypeAndID
      description: The HTTP request GET /participants/<Type>/<ID> (or GET /participants/<Type>/<ID>/<SubId>)
        is used to find out in which FSP the requested Party, defined by <Type>, <ID>
        and optionally <SubId>, is located (for example, GET /participants/MSISDN/123456789,
        or GET /participants/BUSINESS/shoecompany/employee1).
      operationId: ParticipantsSubIdByTypeAndIDGet
      parameters:
        - $ref: '#/components/parameters/Accept'
      responses:
        202:
          $ref: '#/components/responses/Response202'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
    put:
      tags:
        - participants
        - sampled
      summary: ParticipantsSubIdByTypeAndID
      description: The callback PUT /participants/<Type>/<ID> (or PUT /participants/<Type>/<ID>/<SubId>)
        is used to inform the client of a successful result of the lookup, creation,
        or deletion of the FSP information related to the Party. If the FSP information
        is deleted, the fspId element should be empty; otherwise the element should
        include the FSP information for the Party.
      operationId: ParticipantsSubIdByTypeAndIDPut
      parameters:
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantsTypeIDPutResponse'
        required: true
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
    post:
      tags:
        - participants
        - sampled
      summary: ParticipantsSubIdByTypeAndID
      description: The HTTP request POST /participants/<Type>/<ID> (or POST /participants/<Type>/<ID>/<SubId>)
        is used to create information in the server regarding the provided identity,
        defined by <Type>, <ID>, and optionally <SubId> (for example, POST /participants/MSISDN/123456789
        or POST /participants/BUSINESS/shoecompany/employee1).
      operationId: ParticipantsSubIdByTypeAndIDPost
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantsTypeIDSubIDPostRequest'
        required: true
      responses:
        202:
          $ref: '#/components/responses/Response202'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
    delete:
      tags:
        - participants
        - sampled
      summary: ParticipantsSubIdByTypeAndID
      description: The HTTP request DELETE /participants/<Type>/<ID> (or DELETE /participants/<Type>/<ID>/<SubId>)
        is used to delete information in the server regarding the provided identity,
        defined by <Type> and <ID>) (for example, DELETE /participants/MSISDN/123456789),
        and optionally <SubId>. This HTTP request should support a query string to
        delete FSP information regarding a specific currency only. To delete a specific
        currency only, the HTTP request DELETE /participants/<Type>/<ID>?currency=XYZ
        should be used, where XYZ is the requested currency. Note -  The Account Lookup
        System should verify that it is the Party’s current FSP that is deleting the
        FSP information.
      operationId: ParticipantsSubIdByTypeAndIDDelete
      parameters:
        - $ref: '#/components/parameters/Accept'
      responses:
        202:
          $ref: '#/components/responses/Response202'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
  /participants/{Type}/{ID}:
    parameters:
      - $ref: '#/components/parameters/Type'
      - $ref: '#/components/parameters/ID'
      - $ref: '#/components/parameters/Content-Type'
      - $ref: '#/components/parameters/Date'
      - $ref: '#/components/parameters/X-Forwarded-For'
      - $ref: '#/components/parameters/FSPIOP-Source'
      - $ref: '#/components/parameters/FSPIOP-Destination-Optional'
      - $ref: '#/components/parameters/FSPIOP-Encryption'
      - $ref: '#/components/parameters/FSPIOP-Signature'
      - $ref: '#/components/parameters/FSPIOP-URI'
      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'
    get:
      tags:
        - participants
        - sampled
      summary: ParticipantsByTypeAndID
      description: The HTTP request GET /participants/<Type>/<ID> (or GET /participants/<Type>/<ID>/<SubId>)
        is used to find out in which FSP the requested Party, defined by <Type>, <ID>
        and optionally <SubId>, is located (for example, GET /participants/MSISDN/123456789,
        or GET /participants/BUSINESS/shoecompany/employee1).
      operationId: ParticipantsByTypeAndIDGet
      parameters:
        - $ref: '#/components/parameters/Accept'
      responses:
        202:
          $ref: '#/components/responses/Response202'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
    put:
      tags:
        - participants
        - sampled
      summary: ParticipantsByTypeAndID
      description: The callback PUT /participants/<Type>/<ID> (or PUT /participants/<Type>/<ID>/<SubId>)
        is used to inform the client of a successful result of the lookup, creation,
        or deletion of the FSP information related to the Party. If the FSP information
        is deleted, the fspId element should be empty; otherwise the element should
        include the FSP information for the Party.
      operationId: ParticipantsByTypeAndIDPut
      parameters:
        - $ref: '#/components/parameters/Accept-Optional'
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantsTypeIDPutResponse'
        required: true
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
    post:
      tags:
        - participants
        - sampled
      summary: ParticipantsByIDAndType
      description: The HTTP request POST /participants/<Type>/<ID> (or POST /participants/<Type>/<ID>/<SubId>)
        is used to create information in the server regarding the provided identity,
        defined by <Type>, <ID>, and optionally <SubId> (for example, POST /participants/MSISDN/123456789
        or POST /participants/BUSINESS/shoecompany/employee1).
      operationId: ParticipantsByIDAndTypePost
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantsTypeIDSubIDPostRequest'
        required: true
      responses:
        202:
          $ref: '#/components/responses/Response202'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
    delete:
      tags:
        - participants
        - sampled
      summary: ParticipantsByTypeAndID
      description: The HTTP request DELETE /participants/<Type>/<ID> (or DELETE /participants/<Type>/<ID>/<SubId>)
        is used to delete information in the server regarding the provided identity,
        defined by <Type> and <ID>) (for example, DELETE /participants/MSISDN/123456789),
        and optionally <SubId>. This HTTP request should support a query string to
        delete FSP information regarding a specific currency only. To delete a specific
        currency only, the HTTP request DELETE /participants/<Type>/<ID>?currency=XYZ
        should be used, where XYZ is the requested currency. Note -  The Account Lookup
        System should verify that it is the Party’s current FSP that is deleting the
        FSP information.
      operationId: ParticipantsByTypeAndIDDelete
      parameters:
        - $ref: '#/components/parameters/Accept'
      responses:
        202:
          $ref: '#/components/responses/Response202'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
  /participants:
    post:
      tags:
        - participants
        - sampled
      summary: Participants
      description: The HTTP request POST /participants is used to create information
        in the server regarding the provided list of identities. This request should
        be used for bulk creation of FSP information for more than one Party. The
        optional currency parameter should indicate that each provided Party supports
        the currency
      operationId: ParticipantsPost
      parameters:
        - $ref: '#/components/parameters/Content-Length'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/Date'
        - $ref: '#/components/parameters/X-Forwarded-For'
        - $ref: '#/components/parameters/FSPIOP-Source'
        - $ref: '#/components/parameters/FSPIOP-Destination-Optional'
        - $ref: '#/components/parameters/FSPIOP-Encryption'
        - $ref: '#/components/parameters/FSPIOP-Signature'
        - $ref: '#/components/parameters/FSPIOP-URI'
        - $ref: '#/components/parameters/FSPIOP-HTTP-Method'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantsPostRequest'
        required: true
      responses:
        202:
          $ref: '#/components/responses/Response202'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
  /parties/{Type}/{ID}:
    parameters:
      - $ref: '#/components/parameters/Type'
      - $ref: '#/components/parameters/ID'
      - $ref: '#/components/parameters/Content-Type'
      - $ref: '#/components/parameters/Date'
      - $ref: '#/components/parameters/X-Forwarded-For'
      - $ref: '#/components/parameters/FSPIOP-Source'
      - $ref: '#/components/parameters/FSPIOP-Destination-Optional'
      - $ref: '#/components/parameters/FSPIOP-Encryption'
      - $ref: '#/components/parameters/FSPIOP-Signature'
      - $ref: '#/components/parameters/FSPIOP-URI'
      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'
    get:
      tags:
        - parties
        - sampled
      summary: PartiesByTypeAndID
      description: The HTTP request GET /parties/<Type>/<ID> (or GET /parties/<Type>/<ID>/<SubId>)
        is used to lookup information regarding the requested Party, defined by <Type>,
        <ID> and optionally <SubId> (for example, GET /parties/MSISDN/123456789, or
        GET /parties/BUSINESS/shoecompany/employee1).
      operationId: PartiesByTypeAndIDGet
      parameters:
        - $ref: '#/components/parameters/Accept'
      responses:
        202:
          $ref: '#/components/responses/Response202'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
    put:
      tags:
        - parties
        - sampled
      summary: PartiesByTypeAndID2
      description: The callback PUT /parties/<Type>/<ID> (or PUT /parties/<Type>/<ID>/<SubId>)
        is used to inform the client of a successful result of the Party information
        lookup.
      operationId: PartiesByTypeAndIDPut
      parameters:
        - $ref: '#/components/parameters/Accept-Optional'
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartiesTypeIDPutResponse'
        required: true
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
  /parties/{Type}/{ID}/error:
    put:
      tags:
        - parties
        - sampled
      summary: PartiesErrorByTypeAndID
      description: If the server is unable to find Party information of the provided
        identity, or another processing error occurred, the error callback PUT /parties/<Type>/<ID>/error
        (or PUT /parties/<Type>/<ID>/<SubId>/error) is used.
      operationId: PartiesErrorByTypeAndIDPut
      parameters:
        - $ref: '#/components/parameters/Accept-Optional'
        - $ref: '#/components/parameters/Type'
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/Content-Length'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/Date'
        - $ref: '#/components/parameters/X-Forwarded-For'
        - $ref: '#/components/parameters/FSPIOP-Source'
        - $ref: '#/components/parameters/FSPIOP-Destination-Optional'
        - $ref: '#/components/parameters/FSPIOP-Encryption'
        - $ref: '#/components/parameters/FSPIOP-Signature'
        - $ref: '#/components/parameters/FSPIOP-URI'
        - $ref: '#/components/parameters/FSPIOP-HTTP-Method'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorInformationObject'
        required: true
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
  /parties/{Type}/{ID}/{SubId}:
    parameters:
      - $ref: '#/components/parameters/Type'
      - $ref: '#/components/parameters/ID'
      - $ref: '#/components/parameters/SubId'
      - $ref: '#/components/parameters/Content-Type'
      - $ref: '#/components/parameters/Date'
      - $ref: '#/components/parameters/X-Forwarded-For'
      - $ref: '#/components/parameters/FSPIOP-Source'
      - $ref: '#/components/parameters/FSPIOP-Destination-Optional'
      - $ref: '#/components/parameters/FSPIOP-Encryption'
      - $ref: '#/components/parameters/FSPIOP-Signature'
      - $ref: '#/components/parameters/FSPIOP-URI'
      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'
    get:
      tags:
        - parties
        - sampled
      summary: PartiesSubIdByTypeAndID
      description: The HTTP request GET /parties/<Type>/<ID> (or GET /parties/<Type>/<ID>/<SubId>)
        is used to lookup information regarding the requested Party, defined by <Type>,
        <ID> and optionally <SubId> (for example, GET /parties/MSISDN/123456789, or
        GET /parties/BUSINESS/shoecompany/employee1).
      operationId: PartiesBySubIdTypeAndIDGet
      parameters:
        - $ref: '#/components/parameters/Accept'
      responses:
        202:
          $ref: '#/components/responses/Response202'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
    put:
      tags:
        - parties
        - sampled
      summary: PartiesSubIdByTypeAndID
      description: The callback PUT /parties/<Type>/<ID> (or PUT /parties/<Type>/<ID>/<SubId>)
        is used to inform the client of a successful result of the Party information
        lookup.
      operationId: PartiesSubIdByTypeAndIDPut
      parameters:
        - $ref: '#/components/parameters/Accept-Optional'
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartiesTypeIDPutResponse'
        required: true
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
  /parties/{Type}/{ID}/{SubId}/error:
    put:
      tags:
        - parties
        - sampled
      summary: PartiesSubIdErrorByTypeAndID
      description: If the server is unable to find Party information of the provided
        identity, or another processing error occurred, the error callback PUT /parties/<Type>/<ID>/error
        (or PUT /parties/<Type>/<ID>/<SubId>/error) is used.
      operationId: PartiesErrorBySubIdTypeAndIDPut
      parameters:
        - $ref: '#/components/parameters/Accept-Optional'
        - $ref: '#/components/parameters/Type'
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/SubId'
        - $ref: '#/components/parameters/Content-Length'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/Date'
        - $ref: '#/components/parameters/X-Forwarded-For'
        - $ref: '#/components/parameters/FSPIOP-Source'
        - $ref: '#/components/parameters/FSPIOP-Destination-Optional'
        - $ref: '#/components/parameters/FSPIOP-Encryption'
        - $ref: '#/components/parameters/FSPIOP-Signature'
        - $ref: '#/components/parameters/FSPIOP-URI'
        - $ref: '#/components/parameters/FSPIOP-HTTP-Method'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorInformationObject'
        required: true
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
  /health:
    get:
      tags:
        - health
      summary: Get health
      description: The HTTP request GET /health is used to return the current status
        of the ALS API.
      operationId: HealthGet
      responses:
        200:
          $ref: '#/components/responses/ResponseHealth200'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
  /endpointcache:
    delete:
      tags:
        - cache
        - sampled
      summary: Endpoint Cache
      description: The HTTP request DELETE /endpointcache is used to reset the endpoint
        cache by performing an stopCache and initializeCache the Admin API.
      operationId: EndpointCacheDelete
      parameters:
        - $ref: '#/components/parameters/Date'
      responses:
        202:
          $ref: '#/components/responses/Response202'
        400:
          $ref: '#/components/responses/ErrorResponse400'
        401:
          $ref: '#/components/responses/ErrorResponse401'
        403:
          $ref: '#/components/responses/ErrorResponse403'
        404:
          $ref: '#/components/responses/ErrorResponse404'
        405:
          $ref: '#/components/responses/ErrorResponse405'
        406:
          $ref: '#/components/responses/ErrorResponse406'
        501:
          $ref: '#/components/responses/ErrorResponse501'
        503:
          $ref: '#/components/responses/ErrorResponse503'
components:
  schemas:
    CorrelationId:
      title: CorrelationId
      pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      type: string
      description: Identifier that correlates all messages of the same sequence. The
        API data type UUID (Universally Unique Identifier) is a JSON String in canonical
        format, conforming to RFC 4122, that is restricted by a regular expression
        for interoperability reasons. An UUID is always 36 characters long, 32 hexadecimal
        symbols and 4 dashes (‘-‘).
    Currency:
      title: CurrencyEnum
      maxLength: 3
      minLength: 3
      type: string
      description: The currency codes defined in ISO 4217 as three-letter alphabetic
        codes are used as the standard naming representation for currencies.
      enum:
        - AED
        - AFN
        - ALL
        - AMD
        - ANG
        - AOA
        - ARS
        - AUD
        - AWG
        - AZN
        - BAM
        - BBD
        - BDT
        - BGN
        - BHD
        - BIF
        - BMD
        - BND
        - BOB
        - BRL
        - BSD
        - BTN
        - BWP
        - BYN
        - BZD
        - CAD
        - CDF
        - CHF
        - CLP
        - CNY
        - COP
        - CRC
        - CUC
        - CUP
        - CVE
        - CZK
        - DJF
        - DKK
        - DOP
        - DZD
        - EGP
        - ERN
        - ETB
        - EUR
        - FJD
        - FKP
        - GBP
        - GEL
        - GGP
        - GHS
        - GIP
        - GMD
        - GNF
        - GTQ
        - GYD
        - HKD
        - HNL
        - HRK
        - HTG
        - HUF
        - IDR
        - ILS
        - IMP
        - INR
        - IQD
        - IRR
        - ISK
        - JEP
        - JMD
        - JOD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KPW
        - KRW
        - KWD
        - KYD
        - KZT
        - LAK
        - LBP
        - LKR
        - LRD
        - LSL
        - LYD
        - MAD
        - MDL
        - MGA
        - MKD
        - MMK
        - MNT
        - MOP
        - MRO
        - MUR
        - MVR
        - MWK
        - MXN
        - MYR
        - MZN
        - NAD
        - NGN
        - NIO
        - NOK
        - NPR
        - NZD
        - OMR
        - PAB
        - PEN
        - PGK
        - PHP
        - PKR
        - PLN
        - PYG
        - QAR
        - RON
        - RSD
        - RUB
        - RWF
        - SAR
        - SBD
        - SCR
        - SDG
        - SEK
        - SGD
        - SHP
        - SLL
        - SOS
        - SPL
        - SRD
        - STD
        - SVC
        - SYP
        - SZL
        - THB
        - TJS
        - TMT
        - TND
        - TOP
        - TRY
        - TTD
        - TVD
        - TWD
        - TZS
        - UAH
        - UGX
        - USD
        - UYU
        - UZS
        - VEF
        - VND
        - VUV
        - WST
        - XAF
        - XCD
        - XDR
        - XOF
        - XPF
        - YER
        - ZAR
        - ZMW
        - ZWD
    Date:
      title: Date
      pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
      type: string
      description: The API data type Date is a JSON String in a lexical format that
        is restricted by a regular expression for interoperability reasons. This format,
        as specified in ISO 8601, contains a date only. A more readable version of
        the format is yyyy-MM-dd. Examples - "1982-05-23", "1987-08-05”
    DateOfBirth:
      title: DateofBirth (type Date)
      pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
      type: string
      description: Date of Birth of the Party.
    ErrorCode:
      title: ErrorCode
      pattern: ^[1-9]\d{3}$
      type: string
      description: The API data type ErrorCode is a JSON String of four characters,
        consisting of digits only. Negative numbers are not allowed. A leading zero
        is not allowed. Each error code in the API is a four-digit number, for example,
        1234, where the first number (1 in the example) represents the high-level
        error category, the second number (2 in the example) represents the low-level
        error category, and the last two numbers (34 in the example) represents the
        specific error.
    ErrorDescription:
      title: ErrorDescription
      maxLength: 128
      minLength: 1
      type: string
      description: Error description string.
    ExtensionKey:
      title: ExtensionKey
      maxLength: 32
      minLength: 1
      type: string
      description: Extension key.
    ExtensionValue:
      title: ExtensionValue
      maxLength: 128
      minLength: 1
      type: string
      description: Extension value.
    FspId:
      title: FspId
      maxLength: 32
      minLength: 1
      type: string
      description: FSP identifier.
    HealthStatusType:
      title: HealthStatusType
      type: string
      description: Below are the allowed values for the enumeration HealthStatusType
        - OK - DOWN
      enum:
        - OK
        - DOWN
    MerchantClassificationCode:
      title: MerchantClassificationCode
      pattern: ^[\d]{1,4}$
      type: string
      description: A limited set of pre-defined numbers. This list would be a limited
        set of numbers identifying a set of popular merchant types like School Fees,
        Pubs and Restaurants, Groceries, etc.
    PartyIdType:
      title: PartyIdTypeEnum
      type: string
      description: Below are the allowed values for the enumeration - MSISDN An MSISDN
        (Mobile Station International Subscriber Directory Number, that is, the phone
        number) is used as reference to a participant. The MSISDN identifier should
        be in international format according to the ITU-T E.164 standard. Optionally,
        the MSISDN may be prefixed by a single plus sign, indicating the international
        prefix. - EMAIL An email is used as reference to a participant. The format
        of the email should be according to the informational RFC 3696. - PERSONAL_ID
        A personal identifier is used as reference to a participant. Examples of personal
        identification are passport number, birth certificate number, and national
        registration number. The identifier number is added in the PartyIdentifier
        element. The personal identifier type is added in the PartySubIdOrType element.
        - BUSINESS A specific Business (for example, an organization or a company)
        is used as reference to a participant. The BUSINESS identifier can be in any
        format. To make a transaction connected to a specific username or bill number
        in a Business, the PartySubIdOrType element should be used. - DEVICE A specific
        device (for example, a POS or ATM) ID connected to a specific business or
        organization is used as reference to a Party. For referencing a specific device
        under a specific business or organization, use the PartySubIdOrType element.
        - ACCOUNT_ID A bank account number or FSP account ID should be used as reference
        to a participant. The ACCOUNT_ID identifier can be in any format, as formats
        can greatly differ depending on country and FSP. - IBAN A bank account number
        or FSP account ID is used as reference to a participant. The IBAN identifier
        can consist of up to 34 alphanumeric characters and should be entered without
        whitespace. - ALIAS An alias is used as reference to a participant. The alias
        should be created in the FSP as an alternative reference to an account owner.
        Another example of an alias is a username in the FSP system. The ALIAS identifier
        can be in any format. It is also possible to use the PartySubIdOrType element
        for identifying an account under an Alias defined by the PartyIdentifier.
        - CONSENT - TBD
        - THIRD_PARTY_LINK - TBD
      enum:
        - MSISDN
        - EMAIL
        - PERSONAL_ID
        - BUSINESS
        - DEVICE
        - ACCOUNT_ID
        - IBAN
        - ALIAS
        - CONSENT
        - THIRD_PARTY_LINK
    ErrorInformation:
      title: ErrorInformation
      required:
        - errorCode
        - errorDescription
      type: object
      properties:
        errorCode:
          $ref: '#/components/schemas/ErrorCode'
        errorDescription:
          $ref: '#/components/schemas/ErrorDescription'
        extensionList:
          $ref: '#/components/schemas/ExtensionList'
      description: Data model for the complex type ErrorInformation.
    ErrorInformationObject:
      title: ErrorInformationObject
      required:
        - errorInformation
      type: object
      properties:
        errorInformation:
          $ref: '#/components/schemas/ErrorInformation'
      description: Data model for the complex type object that contains ErrorInformation.
    ErrorInformationResponse:
      title: ErrorInformationResponse
      type: object
      properties:
        errorInformation:
          $ref: '#/components/schemas/ErrorInformation'
      description: Data model for the complex type object that contains an optional
        element ErrorInformation used along with 4xx and 5xx responses.
    Extension:
      title: Extension
      required:
        - key
        - value
      type: object
      properties:
        key:
          $ref: '#/components/schemas/ExtensionKey'
        value:
          $ref: '#/components/schemas/ExtensionValue'
      description: Data model for the complex type Extension
    ExtensionList:
      title: ExtensionList
      required:
        - extension
      type: object
      properties:
        extension:
          maxItems: 16
          minItems: 1
          type: array
          description: Number of Extension elements
          items:
            $ref: '#/components/schemas/Extension'
      description: Data model for the complex type ExtensionList
    FirstName:
      title: FirstName
      maxLength: 128
      minLength: 1
      pattern: '^(?!\s*$)[\p{L}\p{Nd} .,''-]{1,128}$'
      type: string
      description: First name of the Party (Name Type).
    HealthServicesType:
      title: HealthServicesType
      type: object
      properties:
        name:
          type: string
        status:
          $ref: '#/components/schemas/HealthStatusType'
      description: Data model for the complex type HealthServicesType. Contains health
        services information.
    LastName:
      title: LastName
      maxLength: 128
      minLength: 1
      pattern: '^(?!\s*$)[\p{L}\p{Nd} .,''-]{1,128}$'
      type: string
      description: Last name of the Party (Name Type).
    MiddleName:
      title: MiddleName
      maxLength: 128
      minLength: 1
      pattern: '^(?!\s*$)[\p{L}\p{Nd} .,''-]{1,128}$'
      type: string
      description: Middle name of the Party (Name Type).
    ParticipantsTypeIDSubIDPostRequest:
      title: ParticipantsTypeIDSubIDPostRequest
      required:
        - fspId
      type: object
      properties:
        fspId:
          $ref: '#/components/schemas/FspId'
        currency:
          $ref: '#/components/schemas/Currency'
        extensionList:
          $ref: '#/components/schemas/ExtensionList'
      description: POST /participants/{Type}/{ID}/{SubId}, /participants/{Type}/{ID}
        object
    ParticipantsTypeIDPutResponse:
      title: ParticipantsTypeIDPutResponse
      type: object
      properties:
        fspId:
          $ref: '#/components/schemas/FspId'
      description: PUT /participants/{Type}/{ID}/{SubId}, /participants/{Type}/{ID}
        object
    ParticipantsIDPutResponse:
      title: ParticipantsIDPutResponse
      required:
        - partyList
      type: object
      properties:
        partyList:
          maxItems: 10000
          minItems: 1
          type: array
          description: List of PartyResult elements that were either created or failed
            to be created.
          items:
            $ref: '#/components/schemas/PartyResult'
        currency:
          $ref: '#/components/schemas/Currency'
      description: PUT /participants/{ID} object
    ParticipantsPostRequest:
      title: ParticipantsPostRequest
      required:
        - partyList
        - requestId
      type: object
      properties:
        requestId:
          $ref: '#/components/schemas/CorrelationId'
        partyList:
          maxItems: 10000
          minItems: 1
          type: array
          description: List of PartyIdInfo elements that the client would like to
            update or create FSP information about.
          items:
            $ref: '#/components/schemas/PartyIdInfo'
        currency:
          $ref: '#/components/schemas/Currency'
      description: POST /participants object
    Party:
      title: Party
      required:
        - partyIdInfo
      type: object
      properties:
        partyIdInfo:
          $ref: '#/components/schemas/PartyIdInfo'
        merchantClassificationCode:
          $ref: '#/components/schemas/MerchantClassificationCode'
        name:
          $ref: '#/components/schemas/PartyName'
        personalInfo:
          $ref: '#/components/schemas/PartyPersonalInfo'
      description: Data model for the complex type Party.
    PartyComplexName:
      title: PartyComplexName
      type: object
      properties:
        firstName:
          $ref: '#/components/schemas/FirstName'
        middleName:
          $ref: '#/components/schemas/MiddleName'
        lastName:
          $ref: '#/components/schemas/LastName'
      description: Data model for the complex type PartyComplexName.
    PartyIdInfo:
      title: PartyIdInfo
      required:
        - partyIdType
        - partyIdentifier
      type: object
      properties:
        partyIdType:
          $ref: '#/components/schemas/PartyIdType'
        partyIdentifier:
          $ref: '#/components/schemas/PartyIdentifier'
        partySubIdOrType:
          $ref: '#/components/schemas/PartySubIdOrType'
        fspId:
          $ref: '#/components/schemas/FspId'
        extensionList:
          $ref: '#/components/schemas/ExtensionList'
      description: Data model for the complex type PartyIdInfo.
    PartyIdentifier:
      title: PartyIdentifier
      maxLength: 128
      minLength: 1
      type: string
      description: Identifier of the Party.
    PartyName:
      title: PartyName
      maxLength: 128
      minLength: 1
      type: string
      description: Name of the Party. Could be a real name or a nickname.
    PartySubIdOrType:
      title: PartySubIdOrType
      maxLength: 128
      minLength: 1
      type: string
      description: Either a sub-identifier of a PartyIdentifier, or a sub-type of
        the PartyIdType, normally a PersonalIdentifierType.
    PartiesTypeIDPutResponse:
      title: PartiesTypeIDPutResponse
      required:
        - party
      type: object
      properties:
        party:
          $ref: '#/components/schemas/Party'
      description: PUT /parties/{Type}/{ID} object
    PartyPersonalInfo:
      title: PartyPersonalInfo
      type: object
      properties:
        complexName:
          $ref: '#/components/schemas/PartyComplexName'
        dateOfBirth:
          $ref: '#/components/schemas/DateOfBirth'
      description: Data model for the complex type PartyPersonalInfo.
    PartyResult:
      title: PartyResult
      required:
        - partyId
      type: object
      properties:
        partyId:
          $ref: '#/components/schemas/PartyIdInfo'
        errorInformation:
          $ref: '#/components/schemas/ErrorInformation'
      description: Data model for the complex type PartyResult.
    Status:
      title: Status
      type: object
      properties:
        status:
          type: string
          description: The return status, usually "OK"
        uptime:
          type: number
          description: The amount of time in seconds that the server has been up for.
        startTime:
          type: string
          description: The UTC time that the server started up
        versionNumber:
          type: string
          description: Current version of the API
        services:
          type: array
          description: An list of the statuses of services that the API requires
          items:
            $ref: '#/components/schemas/HealthServicesType'
      description: Data model for the api status.
  responses:
    ErrorResponse400:
      description: Bad Request - The application cannot process the request; for example,
        due to malformed syntax or the payload exceeded size restrictions.
      headers:
        Content-Length:
          description: The Content-Length header field indicates the anticipated size
            of the payload body. Only sent if there is a body.
          schema:
            type: integer
        Content-Type:
          description: The Content-Type header indicates the specific version of the
            API used to send the payload body.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
    ErrorResponse401:
      description: Unauthorized - The request requires authentication in order to
        be processed.
      headers:
        Content-Length:
          description: The Content-Length header field indicates the anticipated size
            of the payload body. Only sent if there is a body.
          schema:
            type: integer
        Content-Type:
          description: The Content-Type header indicates the specific version of the
            API used to send the payload body.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
    ErrorResponse403:
      description: Forbidden - The request was denied and will be denied in the future.
      headers:
        Content-Length:
          description: The Content-Length header field indicates the anticipated size
            of the payload body. Only sent if there is a body.
          schema:
            type: integer
        Content-Type:
          description: The Content-Type header indicates the specific version of the
            API used to send the payload body.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
    ErrorResponse404:
      description: Not Found - The resource specified in the URI was not found.
      headers:
        Content-Length:
          description: The Content-Length header field indicates the anticipated size
            of the payload body. Only sent if there is a body.
          schema:
            type: integer
        Content-Type:
          description: The Content-Type header indicates the specific version of the
            API used to send the payload body.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
    ErrorResponse405:
      description: Method Not Allowed - An unsupported HTTP method for the request
        was used.
      headers:
        Content-Length:
          description: The Content-Length header field indicates the anticipated size
            of the payload body. Only sent if there is a body.
          schema:
            type: integer
        Content-Type:
          description: The Content-Type header indicates the specific version of the
            API used to send the payload body.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
    ErrorResponse406:
      description: Not acceptable - The server is not capable of generating content
        according to the Accept headers sent in the request. Used in the API to indicate
        that the server does not support the version that the client is requesting.
      headers:
        Content-Length:
          description: The Content-Length header field indicates the anticipated size
            of the payload body. Only sent if there is a body.
          schema:
            type: integer
        Content-Type:
          description: The Content-Type header indicates the specific version of the
            API used to send the payload body.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
    ErrorResponse501:
      description: Not Implemented - The server does not support the requested service.
        The client should not retry.
      headers:
        Content-Length:
          description: The Content-Length header field indicates the anticipated size
            of the payload body. Only sent if there is a body.
          schema:
            type: integer
        Content-Type:
          description: The Content-Type header indicates the specific version of the
            API used to send the payload body.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
    ErrorResponse503:
      description: Service Unavailable - The server is currently unavailable to accept
        any new service requests. This should be a temporary state, and the client
        should retry within a reasonable time frame.
      headers:
        Content-Length:
          description: The Content-Length header field indicates the anticipated size
            of the payload body. Only sent if there is a body.
          schema:
            type: integer
        Content-Type:
          description: The Content-Type header indicates the specific version of the
            API used to send the payload body.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInformationResponse'
    Response200:
      description: OK
      content: {}
    Response202:
      description: Accepted
      content: {}
    ResponseHealth200:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Status'
  parameters:
    Accept:
      name: accept
      in: header
      description: The Accept header field indicates the version of the API the client
        would like the server to use.
      required: true
      schema:
        type: string
    Accept-Optional:
      name: accept
      in: header
      description: The Accept header field indicates the version of the API the client
        would like the server to use.
      schema:
        type: string
    Content-Length:
      name: content-length
      in: header
      description: The Content-Length header field indicates the anticipated size
        of the payload body. Only sent if there is a body. Note - The API supports
        a maximum size of 5242880 bytes (5 Megabytes)
      schema:
        type: integer
    Content-Type:
      name: content-type
      in: header
      description: The Content-Type header indicates the specific version of the API
        used to send the payload body.
      required: true
      schema:
        type: string
    Date:
      name: date
      in: header
      description: The Date header field indicates the date when the request was sent.
      required: true
      schema:
        type: string
    X-Forwarded-For:
      name: x-forwarded-for
      in: header
      description: The X-Forwarded-For header field is an unofficially accepted standard
        used for informational purposes of the originating client IP address, as a
        request might pass multiple proxies, firewalls, and so on. Multiple X-Forwarded-For
        values as in the example shown here should be expected and supported by implementers
        of the API. Note - An alternative to X-Forwarded-For is defined in RFC 7239.
        However, to this point RFC 7239 is less-used and supported than X-Forwarded-For.
      schema:
        type: string
    FSPIOP-Source:
      name: fspiop-source
      in: header
      description: The FSPIOP-Source header field is a non-HTTP standard field used
        by the API for identifying the sender of the HTTP request. The field should
        be set by the original sender of the request. Required for routing and signature
        verification (see header field FSPIOP-Signature).
      required: true
      schema:
        $ref: '#/components/schemas/FspId'
    FSPIOP-Destination-Required:
      name: fspiop-destination
      in: header
      description: The FSPIOP-Destination header field is a non-HTTP standard field
        used by the API for HTTP header based routing of requests and responses to
        the destination. The field should be set by the original sender of the request
        (if known), so that any entities between the client and the server do not
        need to parse the payload for routing purposes.
      required: true
      schema:
        $ref: '#/components/schemas/FspId'
    FSPIOP-Destination-Optional:
      name: fspiop-destination
      in: header
      description: The FSPIOP-Destination header field is a non-HTTP standard field
        used by the API for HTTP header based routing of requests and responses to
        the destination. The field should be set by the original sender of the request
        (if known), so that any entities between the client and the server do not
        need to parse the payload for routing purposes.
      schema:
        $ref: '#/components/schemas/FspId'
    FSPIOP-Encryption:
      name: fspiop-encryption
      in: header
      description: The FSPIOP-Encryption header field is a non-HTTP standard field
        used by the API for applying end-to-end encryption of the request.
      schema:
        type: string
    FSPIOP-Signature:
      name: fspiop-signature
      in: header
      description: The FSPIOP-Signature header field is a non-HTTP standard field
        used by the API for applying an end-to-end request signature.
      schema:
        type: string
    FSPIOP-URI:
      name: fspiop-uri
      in: header
      description: The FSPIOP-URI header field is a non-HTTP standard field used by
        the API for signature verification, should contain the service URI. Required
        if signature verification is used, for more information see API Signature
        document.
      schema:
        type: string
    FSPIOP-HTTP-Method:
      name: fspiop-http-method
      in: header
      description: The FSPIOP-HTTP-Method header field is a non-HTTP standard field
        used by the API for signature verification, should contain the service HTTP
        method. Required if signature verification is used, for more information see
        API Signature document.
      schema:
        type: string
    ID:
      name: ID
      in: path
      required: true
      schema:
        maxLength: 128
        minLength: 1
        type: string
    Type:
      name: Type
      in: path
      required: true
      schema:
        type: string
        enum:
          - MSISDN
          - EMAIL
          - PERSONAL_ID
          - BUSINESS
          - DEVICE
          - ACCOUNT_ID
          - IBAN
          - ALIAS
          - CONSENT
          - THIRD_PARTY_LINK
    SubId:
      name: SubId
      in: path
      required: true
      schema:
        type: string
